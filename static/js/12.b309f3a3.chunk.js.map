{"version":3,"sources":["views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollRoundData.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx","views/Predictions/helpers.ts","utils/bscscan.ts","hooks/useTokenBalance.ts","components/BlockProgress.tsx","hooks/useGetBlockCountdown.ts"],"names":["HistoryTabs","useGetLatestOraclePrice","useState","BIG_ZERO","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","chainlinkOracleContract","useChainlinkOracleContract","useEffect","a","methods","latestAnswer","call","response","getBalanceAmount","BigNumber","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollRoundData","account","useWeb3React","getMarketData","marketData","updateMarketData","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","useRef","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","current","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","Modal","ModalContainer","CollectRoundWinningsModal","payout","roundId","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","formatBnb","fontSize","times","toNumber","claim","send","from","once","result","markBetAsCollected","transactionHash","href","getBscScanTransactionUrl","error","message","console","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","BetPosition","BULL","getPrizePoolAmount","totalAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","multiplier","amount","formattedMultiplier","toLocaleString","maximumFractionDigits","lineHeight","LockPriceRow","lockPrice","formatUsd","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","RoundResult","closePrice","isPositionUp","priceDifference","failed","useIsRefundable","isRefundable","setIsRefundable","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","BetResult","canClaim","useBetCanClaim","Result","WIN","getPayout","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchBet","getHeaderText","getHeaderIcon","getResultColor","StyledBetDetails","dropdown","BetDetails","bullAmount","bearAmount","bullMultiplier","getMultiplier","bearMultiplier","LIVE","getBscScanBlockNumberUrl","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","status","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","role","scale","Filter","label","StyledHeader","getBubbleGumBackground","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","Divider","backgroundDisabled","initialPnlSummary","bestRound","getPnlSummary","reduce","rawPayout","getNetPayout","PnlTab","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","getBscScanAddressUrl","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","UnlockButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","useTooltip","whiteSpace","placement","targetRef","tooltipVisible","tooltip","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","cardHeader","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","my","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","useGetBetByRoundId","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","currentBlock","useBlock","totalInterval","useGetIntervalBlocks","useGetLastOraclePrice","isBull","gt","priceColor","minus","useCountUp","start","end","duration","decimals","countUp","update","BlockProgress","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","gasPrice","BIG_TEN","pow","BIG_NINE","toString","dust","DEFAULT_TOKEN_DECIMAL","percentShortcuts","SetPositionCard","percentage","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","balanceDisplay","getBnbAmount","maxBalance","valueAsBn","percentageOfMaxBalance","percentageDisplay","Number","isNaN","showFieldWarning","minBetAmountBalance","eq","key","lt","getButtonProps","bnValue","lte","data","num","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","isWarning","inputProps","name","min","max","onValueChanged","newValue","step","valueLabel","percent","betMethod","decimalValue","getDecimalAmount","errorMsg","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","hash","markPositionAsEntered","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","useBlockCountdown","SoonRoundCard","countdown","formatRoundTime","RoundCard","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","usePreviousValue","fetchCurrentBets","roundIds","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","Math","floor","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","usePersistState","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","initialBlock","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","all","getStaticPredictionsData","staticPredictionsData","intervalBlocks","bufferBlocks","latestRound","find","market","paused","setPredictionStatus","currentRoundStartBlock","futureRounds","halfInterval","i","push","makeFutureRoundResponse","roundData","makeRoundData","transformRoundResponse","initialize","currentRoundStartBlockNumber","history","fetchInitialData","INITIAL","PageLoader","bnbBn","usd","formatNumber","bnb","minimumFractionDigits","formatToken","padTime","padStart","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","total","address","BASE_BSC_SCAN_URL","block","getBscScanBlockCountdownUrl","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","eth","getBalance","walletBalance","useTokenBalance","fastRefresh","rawProgress","progress","primaryStep","secondsRemaining","setSecondsRemaining","getWeb3NoAccount","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown"],"mappings":"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","file":"static/js/12.b309f3a3.chunk.js","sourcesContent":["import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { getBubbleGumBackground } from '../../helpers'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\nconst getClaimParam = (historyFilter: HistoryFilter) => {\n  switch (historyFilter) {\n    case HistoryFilter.COLLECTED:\n      return true\n    case HistoryFilter.UNCOLLECTED:\n      return false\n    case HistoryFilter.ALL:\n    default:\n      return undefined\n  }\n}\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useChainlinkOracleContract } from 'hooks/useContract'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(BIG_ZERO)\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n  const chainlinkOracleContract = useChainlinkOracleContract()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const response = await chainlinkOracleContract.methods.latestAnswer().call()\n      setPrice(getBalanceAmount(new BigNumber(response), 8))\n    }\n\n    fetchPrice()\n  }, [chainlinkOracleContract, lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 30) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useWeb3React } from '@web3-react/core'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { updateMarketData } from 'state/predictions'\nimport { getMarketData } from 'state/predictions/helpers'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollRoundData = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const timer = setInterval(async () => {\n      const marketData = await getMarketData()\n\n      dispatch(updateMarketData(marketData))\n    }, POLL_TIME_IN_SECONDS * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [account, dispatch])\n}\n\nexport default usePollRoundData\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  LinkExternal,\n  ModalCloseButton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\nimport { useAppDispatch } from 'state'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport { markBetAsCollected } from 'state/predictions'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { formatBnb } from '../helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  payout: number\n  roundId: string\n  epoch: number\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\n  payout,\n  roundId,\n  epoch,\n  onDismiss,\n  onSuccess,\n}) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = usePriceBnbBusd()\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async (result) => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n\n        dispatch(markBetAsCollected({ account, roundId }))\n        onDismiss()\n        setIsPendingTx(false)\n        toastSuccess(\n          t('Winnings collected!'),\n          <Box>\n            <Text as=\"p\" mb=\"8px\">\n              {t('Your prizes have been sent to your wallet')}\n            </Text>\n            {result.transactionHash && (\n              <LinkExternal href={getBscScanTransactionUrl(result.transactionHash)}>\n                {t('View on BscScan')}\n              </LinkExternal>\n            )}\n          </Box>,\n        )\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\n          <Text>{t('Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  payout: number\n  roundId: string\n  epoch: number\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\n  payout,\n  roundId,\n  epoch,\n  hasClaimed,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  const [onPresentCollectWinningsModal] = useModal(\n    <CollectRoundWinningsModal payout={payout} roundId={roundId} epoch={epoch} onSuccess={onSuccess} />,\n    false,\n  )\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const predictionsContract = usePredictionsContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async () => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n        setIsPendingTx(false)\n        toastSuccess(t('Position reclaimed!'))\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { formatBnb, formatUsd } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, Round } from 'state/types'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: Round['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\n// LockPriceRow\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.cardBorder\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const predictionsContract = usePredictionsContract()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\n\n      if (canClaim) {\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, predictionsContract, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBetCanClaim, usePriceBnbBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchBet } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = result === Result.WIN ? getPayout(bet) : bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    await dispatch(fetchBet({ account, id: bet.id }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton\n            payout={payout}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            hasClaimed={!canClaim}\n            width=\"100%\"\n            mb=\"16px\"\n            onSuccess={handleSuccess}\n          >\n            {t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{t('Your Result')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${result === Result.LOSE ? '-' : '+'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanBlockNumberUrl } from 'utils/bscscan'\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { getMultiplier } from '../../helpers'\nimport { PayoutRow, RoundResult } from '../RoundResult'\nimport BetResult from './BetResult'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResult round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResult>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text>{t('Opening Block')}</Text>\n        <Link href={getBscScanBlockNumberUrl(bet.round.lockBlock)} external>\n          {bet.round.lockBlock}\n        </Link>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{t('Closing Block')}</Text>\n        <Link href={getBscScanBlockNumberUrl(bet.round.endBlock)} external>\n          {bet.round.endBlock}\n        </Link>\n      </Flex>\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { useBetCanClaim, useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            payout={payout}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Bet } from 'state/types'\nimport HistoricalBet from './HistoricalBet'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n\n  return hasBetHistory ? (\n    <>\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.id} bet={bet} />\n      ))}\n    </>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { formatBnb } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: BigNumber\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useGetCurrentEpoch, usePriceBnbBusd } from 'state/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getPayout } from 'views/Predictions/helpers'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst TREASURY_FEE = 0.03\n\nconst getNetPayout = (bet: Bet) => {\n  const rawPayout = getPayout(bet)\n  const fee = rawPayout * TREASURY_FEE\n  return rawPayout - fee - bet.amount\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.id, payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`${getBscScanAddressUrl(account)}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchHistory } from 'state/predictions'\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\nimport { HistoryFilter } from 'state/types'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetHistoryByAccount,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const { t } = useTranslation()\n  const bets = useGetHistoryByAccount(account)\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  // Currently the api cannot filter by unclaimed AND won so we do it here\n  // when the user has selected Uncollected only include positions they won\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\n\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <UnlockButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: number\n}\n\nconst StyledEnteredTag = styled(Tag).attrs({\n  variant: 'secondary',\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\n})`\n  font-weight: bold;\n  text-transform: uppercase;\n`\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: number\n  multiplier?: number\n  hasEntered?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean) => {\n    if (isDisabled) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import styled from 'styled-components'\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\n\nconst Card = styled(UIKitCard)`\n  border-radius: 16px;\n`\n\nexport default Card\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  blockNumber: number\n  icon?: ReactElement\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  border-radius: 16px 16px 0 0;\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { useBetCanClaim } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  roundId: string\n  epoch: number\n  payout: number\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\n  roundId,\n  epoch,\n  payout,\n  isBottom = false,\n  ...props\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const canClaim = useBetCanClaim(account, roundId)\n\n  if (!canClaim) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton payout={payout} roundId={roundId} epoch={epoch} hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: Round\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch, startBlock } = round\n  const estimatedEndBlock = startBlock + interval\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetBetByRoundId } from 'state/hooks'\nimport { RoundResult } from '../RoundResult'\nimport { getPayout } from '../../helpers'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface ExpiredRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { id, epoch, endBlock, lockPrice, closePrice } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const bet = useGetBetByRoundId(account, round.id)\n  const payout = getPayout(bet)\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          blockNumber={endBlock}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n          />\n          <RoundResult round={round} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      <CollectWinningsOverlay roundId={id} epoch={epoch} payout={payout} isBottom={hasEnteredDown} />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: Round\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const estimatedEndBlock = round.startBlock + interval\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useCountUp } from 'react-countup'\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useBlock, useGetIntervalBlocks, useGetLastOraclePrice } from 'state/hooks'\nimport BlockProgress from 'components/BlockProgress'\nimport { formatUsd, getBubbleGumBackground } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst GradientBorder = styled.div`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 16px;\n  padding: 1px;\n`\n\nconst GradientCard = styled(Card)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n`\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, lockBlock, totalAmount } = round\n  const { currentBlock } = useBlock()\n  const totalInterval = useGetIntervalBlocks()\n  const price = useGetLastOraclePrice()\n  const isBull = price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n  const estimatedEndBlock = lockBlock + totalInterval\n  const priceDifference = price.minus(lockPrice).toNumber()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (currentBlock > estimatedEndBlock) {\n    return <CalculatingCard round={round} />\n  }\n\n  return (\n    <GradientBorder>\n      <GradientCard>\n        <CardHeader\n          status=\"live\"\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n          title={t('Live')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlock} />\n        <CardBody p=\"16px\">\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            hasEntered={hasEnteredUp}\n            isActive={isBull}\n          />\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n              {t('Last Price')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n              <div ref={targetRef}>\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n                </TooltipText>\n              </div>\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n                {formatUsd(priceDifference)}\n              </PositionTag>\n            </Flex>\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n            <PrizePoolRow totalAmount={totalAmount} />\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            isActive={!isBull}\n          />\n        </CardBody>\n      </GradientCard>\n      {tooltipVisible && tooltip}\n    </GradientBorder>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { BetPosition } from 'state/types'\nimport { getDecimalAmount } from 'utils/formatBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\nimport PositionTag from '../PositionTag'\nimport { getBnbAmount } from '../../helpers'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\nimport Card from './Card'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  onBack: () => void\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\n}\n\n// /!\\ TEMPORARY /!\\\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\n// TODO: Remove on beta-v2 smart contract release.\nconst gasPrice = new BigNumber(6).times(BIG_TEN.pow(BIG_NINE)).toString()\n\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getPercentDisplay = (percentage: number) => {\n  if (Number.isNaN(percentage)) {\n    return ''\n  }\n\n  if (percentage > 100) {\n    return ''\n  }\n\n  if (percentage < 0) {\n    return ''\n  }\n\n  return `${percentage.toLocaleString(undefined, { maximumFractionDigits: 1 })}%`\n}\n\nconst getButtonProps = (value: BigNumber, bnbBalance: BigNumber, minBetAmountBalance: number) => {\n  if (bnbBalance.eq(0)) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0) || value.isNaN()) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n\n  const balanceDisplay = getBnbAmount(bnbBalance).toNumber()\n  const maxBalance = getBnbAmount(bnbBalance.gt(dust) ? bnbBalance.minus(dust) : bnbBalance).toNumber()\n  const valueAsBn = new BigNumber(value)\n\n  const percentageOfMaxBalance = valueAsBn.div(maxBalance).times(100).toNumber()\n  const percentageDisplay = getPercentDisplay(percentageOfMaxBalance)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n  const minBetAmountBalance = getBnbAmount(minBetAmount).toNumber()\n\n  const handleChange = (input) => {\n    setValue(input)\n  }\n\n  const handleSliderChange = (newValue: number) => {\n    setValue(newValue.toString())\n  }\n\n  const setMax = () => {\n    setValue(maxBalance.toString())\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, bnbBalance, minBetAmountBalance)\n\n  const handleEnterPosition = () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n    const decimalValue = getDecimalAmount(valueAsBn)\n\n    predictionsContract.methods[betMethod]()\n      .send({ from: account, value: decimalValue, gasPrice })\n      .once('sending', () => {\n        setIsTxPending(true)\n      })\n      .once('receipt', async (result) => {\n        setIsTxPending(false)\n        onSuccess(decimalValue, result.transactionHash as string)\n      })\n      .once('error', (error) => {\n        const errorMsg = t('An error occurred, unable to enter your position')\n\n        toastError(t('Error'), error?.message)\n        setIsTxPending(false)\n        console.error(errorMsg, error)\n      })\n  }\n\n  // Warnings\n  useEffect(() => {\n    const bnValue = new BigNumber(value)\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient BNB balance' })\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: minBetAmountBalance, token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={maxBalance}\n          value={valueAsBn.lte(maxBalance) ? valueAsBn.toNumber() : 0}\n          onValueChanged={handleSliderChange}\n          step={0.000000000000001}\n          valueLabel={account ? percentageDisplay : ''}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percent) => {\n            const handleClick = () => {\n              setValue(((percent / 100) * maxBalance).toString())\n            }\n\n            return (\n              <Button\n                key={percent}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percent}%`}\n              </Button>\n            )\n          })}\n          <Button scale=\"xs\" variant=\"tertiary\" onClick={setMax} disabled={!account || isTxPending}>\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, Round } from 'state/types'\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\nimport { markPositionAsEntered } from 'state/predictions'\nimport useToast from 'hooks/useToast'\nimport CardFlip from '../CardFlip'\nimport { formatBnb, getBnbAmount } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const interval = useGetIntervalBlocks()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { currentBlock } = useBlock()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = currentBlock >= round.startBlock + interval\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n  const estimatedLockBlock = round.startBlock + interval\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getCanEnterPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\n    // Optimistically set the user bet so we see the entered position immediately.\n    dispatch(\n      markPositionAsEntered({\n        account,\n        roundId: round.id,\n        bet: {\n          hash,\n          round,\n          position,\n          amount: getBnbAmount(decimalValue).toNumber(),\n          claimed: false,\n        },\n      }),\n    )\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      t('%position% position entered', {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          blockNumber={estimatedLockBlock}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useRoundCountdown = (intervalsToAdd = 1) => {\n  const interval = useGetIntervalBlocks()\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\n  const blocksToAdd = intervalsToAdd * interval\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\n\n  return seconds\n}\n\nexport default useRoundCountdown\n","import React from 'react'\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\nimport { formatRoundTime } from '../../helpers'\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: Round\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const currentEpoch = useGetCurrentEpoch()\n  const estimatedEndBlock = round.startBlock + interval\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\n  const countdown = formatRoundTime(seconds)\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"soon\"\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Later')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByRoundId, useGetCurrentEpoch } from 'state/hooks'\nimport { BetPosition, Round } from 'state/types'\nimport { getMultiplier } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: Round\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { id, epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const bet = useGetBetByRoundId(account, id)\n  const hasEntered = bet !== null\n  const hasEnteredUp = hasEntered && bet.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && bet.position === BetPosition.BEAR\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={bet?.amount}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={bet?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      betAmount={bet?.amount}\n      bullMultiplier={bullMultiplier}\n      bearMultiplier={bearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\nimport { useGetLastOraclePrice } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useRoundCountdown from '../hooks/useRoundCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 60px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  display: flex;\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: 16px;\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval }) => {\n  const seconds = useRoundCountdown()\n  const countdown = formatRoundTime(seconds)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {seconds === 0 ? t('Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{interval}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Card)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"60m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <IconButton\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </IconButton>\n          </HelpButtonWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport { fetchCurrentBets } from 'state/predictions'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: rounds.map((round) => round.id) }))\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap/uikit'\nimport { useGetSortedRounds } from 'state/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC = () => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const initialIndex = Math.floor(rounds.length / 2)\n\n  useOnNextRound()\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={initialIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.id}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\n\nenum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && (\n              <div>\n                <Positions />\n              </div>\n            )}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ChartDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Text as=\"p\" mb=\"16px\">\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\n        </Text>\n        <Text as=\"p\" mb=\"16px\">\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\n        </Text>\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n          {t('I understand')}\n        </Button>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n            external\n          >\n            {t('Learn More')}\n          </LinkExternal>\n        </Flex>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\nimport {\n  getMarketData,\n  getStaticPredictionsData,\n  makeFutureRoundResponse,\n  makeRoundData,\n  transformRoundResponse,\n} from 'state/predictions/helpers'\nimport { fetchCurrentBets, initialize, setPredictionStatus } from 'state/predictions'\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollRoundData from './hooks/usePollRoundData'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer from './components/ChartDisclaimer'\n\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\n\nconst Predictions = () => {\n  const { isXl } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, 'pancake_predictions_accepted_risk')\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, 'pancake_predictions_chart')\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const isDesktop = isXl\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const handleAcceptChart = () => setHasAcceptedChart(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: marketData.rounds.map((round) => round.id) }))\n\n      if (marketData.market.paused) {\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\n        const currentRoundStartBlock = Number(latestRound.startBlock)\n        const futureRounds = []\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\n\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\n        }\n\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\n\n        dispatch(\n          initialize({\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\n            historyFilter: HistoryFilter.ALL,\n            currentRoundStartBlockNumber: currentRoundStartBlock,\n            rounds: roundData,\n            history: {},\n            bets: {},\n          }),\n        )\n      } else {\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\n      }\n    }\n\n    // Do not start initialization until the first block has been retrieved\n    if (initialBlock > 0) {\n      fetchInitialData()\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollRoundData()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n","import BigNumber from 'bignumber.js'\nimport { Bet, BetPosition } from 'state/types'\nimport { DefaultTheme } from 'styled-components'\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const getBnbAmount = (bnbBn: BigNumber) => {\n  return getBalanceAmount(bnbBn, 18)\n}\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const formatToken = (token: number) => {\n  return token ? token.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 }) : '0'\n}\n\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier\n}\n\n// TODO: Move this to the UI Kit\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply * 1e9))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call() * 1e9\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\nimport { useBlock } from 'state/hooks'\n\ninterface BlockProgressProps extends ProgressProps {\n  startBlock: number\n  endBlock: number\n}\n\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\n  const { currentBlock } = useBlock()\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default BlockProgress\n","import { useEffect, useRef, useState } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useBlockCountdown = (blockNumber: number) => {\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\n\n  useEffect(() => {\n    const startCountdown = async () => {\n      const web3 = getWeb3NoAccount()\n      const currentBlock = await web3.eth.getBlockNumber()\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current)\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining((prevSecondsRemaining) => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current)\n            }\n\n            return prevSecondsRemaining - 1\n          })\n        }, 1000)\n      }\n    }\n\n    startCountdown()\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [setSecondsRemaining, blockNumber, timer])\n\n  return secondsRemaining\n}\n\nexport default useBlockCountdown\n"],"sourceRoot":""}