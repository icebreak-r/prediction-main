{"version":3,"sources":["state/predictionsWithToken/helpers.ts","views/PredictionsWithToken/components/History/Header.tsx","state/predictionsWithToken/queries.ts","state/predictionsWithToken/index.ts","views/PredictionsWithToken/hooks/useGetLatestOraclePrice.ts","views/PredictionsWithToken/hooks/usePollOraclePrice.ts","views/PredictionsWithToken/hooks/usePollRoundData.ts","views/PredictionsWithToken/components/Container.tsx","views/PredictionsWithToken/components/CollectWinningsPopup.tsx","views/PredictionsWithToken/context/SwiperProvider.tsx","views/PredictionsWithToken/components/TradingView.tsx","views/PredictionsWithToken/components/Notification/Notification.tsx","views/PredictionsWithToken/components/Notification/ErrorNotification.tsx","views/PredictionsWithToken/components/Notification/PauseNotification.tsx","views/PredictionsWithToken/helpers.ts","views/PredictionsWithToken/components/CollectRoundWinningsModal.tsx","views/PredictionsWithToken/components/CollectWinningsButton.tsx","views/PredictionsWithToken/components/ReclaimPositionButton.tsx","views/PredictionsWithToken/components/PositionTag.tsx","views/PredictionsWithToken/components/RoundResult/styles.tsx","views/PredictionsWithToken/components/RoundResult/RoundResult.tsx","views/PredictionsWithToken/hooks/useIsRefundable.ts","views/PredictionsWithToken/components/History/BetResult.tsx","views/PredictionsWithToken/components/History/BetDetails.tsx","views/PredictionsWithToken/components/History/HistoricalBet.tsx","views/PredictionsWithToken/components/History/RoundsTab.tsx","views/PredictionsWithToken/components/History/PnlTab/PnlChartStyles.tsx","views/PredictionsWithToken/components/History/PnlTab/PnlChart.tsx","views/PredictionsWithToken/components/History/PnlTab/SummaryRow.tsx","views/PredictionsWithToken/components/History/PnlTab/PnlTab.tsx","views/PredictionsWithToken/History.tsx","views/PredictionsWithToken/RoundMultiplierArrows.tsx","views/PredictionsWithToken/components/RoundCard/EnteredTag.tsx","views/PredictionsWithToken/components/RoundCard/MultiplierArrow.tsx","views/PredictionsWithToken/components/RoundCard/Card.tsx","views/PredictionsWithToken/components/RoundCard/CardHeader.tsx","views/PredictionsWithToken/components/RoundCard/CollectWinningsOverlay.tsx","views/PredictionsWithToken/components/RoundCard/CanceledRoundCard.tsx","views/PredictionsWithToken/components/RoundCard/ExpiredRoundCard.tsx","views/PredictionsWithToken/components/RoundCard/CalculatingCard.tsx","views/PredictionsWithToken/components/RoundCard/LiveRoundCard.tsx","views/PredictionsWithToken/components/CardFlip.tsx","views/PredictionsWithToken/hooks/useSwiper.ts","views/PredictionsWithToken/components/FlexRow.tsx","views/PredictionsWithToken/components/RoundCard/SetPositionCard.tsx","views/PredictionsWithToken/components/RoundCard/OpenRoundCard.tsx","views/PredictionsWithToken/hooks/useRoundCountdown.ts","views/PredictionsWithToken/components/RoundCard/SoonRoundCard.tsx","views/PredictionsWithToken/components/RoundCard/index.tsx","views/PredictionsWithToken/components/Label.tsx","views/PredictionsWithToken/components/PrevNextNav.tsx","views/PredictionsWithToken/components/HistoryButton.tsx","views/PredictionsWithToken/components/Menu.tsx","views/PredictionsWithToken/hooks/useOnNextRound.ts","views/PredictionsWithToken/Positions.tsx","views/PredictionsWithToken/Mobile.tsx","views/PredictionsWithToken/Desktop.tsx","views/PredictionsWithToken/components/MobileMenu.tsx","views/PredictionsWithToken/Chart.tsx","views/PredictionsWithToken/components/RiskDisclaimer.tsx","views/PredictionsWithToken/components/ChartDisclaimer.tsx","views/PredictionsWithToken/index.tsx","views/Predictions/helpers.ts","utils/bscscan.ts","hooks/useTokenBalance.ts","components/BlockProgress.tsx","hooks/useGetBlockCountdown.ts"],"names":["Result","HistoryTabs","numberOrNull","value","valueNum","Number","isNaN","makeFutureRoundResponse","epoch","startBlock","id","toString","failed","startAt","lockAt","lockBlock","lockPrice","endBlock","closePrice","totalBets","totalAmount","bearBets","bullBets","bearAmount","bullAmount","position","bets","transformBetResponse","betResponse","bet","hash","amount","parseFloat","BetPosition","BULL","BEAR","claimed","user","address","block","totalBNB","round","transformRoundResponse","roundResponse","positionResponse","map","makeRoundData","rounds","reduce","accum","getRoundResult","currentEpoch","CANCELED","LIVE","roundResultPosition","WIN","LOSE","getCanClaim","getStaticPredictionsData","a","getPredictionsWithTokenContract","methods","makeBatchRequest","call","intervalBlocks","minBetAmount","paused","bufferBlocks","isPaused","console","log","status","PredictionStatus","PAUSED","getMarketData","request","GRAPH_API_PREDICTION_WITH_TOKEN","gql","response","market","marketResponse","getBetHistory","where","first","skip","getBet","betId","toLowerCase","initialState","INITIAL","isLoading","isHistoryPaneOpen","isChartPaneOpen","isFetchingHistory","historyFilter","HistoryFilter","ALL","currentRoundStartBlockNumber","lastOraclePrice","BIG_ZERO","toJSON","history","fetchBet","createAsyncThunk","account","fetchRoundBet","roundId","betResponses","length","fetchCurrentBets","roundIds","round_in","fetchHistory","predictionsSlice","createSlice","name","reducers","setPredictionStatus","state","action","payload","setHistoryPaneState","setChartPaneState","setHistoryFilter","initialize","updateMarketData","newRoundData","incomingCurrentRound","maxBy","newestRound","futureRound","setCurrentEpoch","markBetAsCollected","accountBets","markPositionAsEntered","setLastOraclePrice","extraReducers","builder","addCase","fulfilled","betData","merge","filter","currentBet","pending","rejected","actions","useGetLatestOraclePrice","useState","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","chainlinkOracleContract","useChainlinkOracleContract","useEffect","latestAnswer","getBalanceAmount","BigNumber","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","usePollRoundData","useWeb3React","marketData","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","useRef","predictionStatus","useGetPredictionsStatus","useIsHistoryPaneOpen","isCancelled","current","winnerBets","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","getBnbAmount","bnbBn","getTokenAmount","tokenAmt","getTokenBalanceAmount","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","padTime","num","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","getMultiplier","total","getPayout","multiplier","getBubbleGumBackground","Modal","ModalContainer","CollectRoundWinningsModal","payout","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toNumber","claim","send","from","once","result","transactionHash","href","getBscScanTransactionUrl","error","message","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getTokenPrizePoolAmount","formatToken","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","Background","Box","isNext","isLive","hasEntered","success","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","RoundResult","isPositionUp","priceDifference","useIsRefundable","isRefundable","setIsRefundable","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","BetResult","canClaim","useBetCanClaim","getHeaderColor","handleSuccess","getHeaderText","getHeaderIcon","getResultColor","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","getBscScanBlockNumberUrl","external","StyledBet","attrs","YourResult","HistoricalBet","useGetCurrentEpoch","roundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","role","scale","Filter","label","StyledHeader","ButtonMenuContainer","getClaimParam","COLLECTED","UNCOLLECTED","Header","activeTab","setActiveTab","useGetHistoryFilter","useGetIsFetchingHistory","handleChange","newFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","Divider","backgroundDisabled","initialPnlSummary","bestRound","getPnlSummary","rawPayout","getNetPayout","PnlTab","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","getBscScanAddressUrl","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","UnlockButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","useTooltip","whiteSpace","placement","targetRef","tooltipVisible","tooltip","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","cardHeader","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","blockNumber","my","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","useGetBetByRoundId","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","currentBlock","useBlock","totalInterval","useGetIntervalBlocks","useGetLastOraclePrice","isBull","gt","priceColor","minus","useCountUp","start","end","duration","decimals","countUp","update","BlockProgress","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","icebrk","tokens","cake","gasPrice","BIG_TEN","pow","BIG_NINE","dust","DEFAULT_TOKEN_DECIMAL","percentShortcuts","SetPositionCard","percentage","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","tokenBalance","useTokenBalance","useGetMinBetAmount","usePredictionsWithTokenContract","balanceDisplay","maxBalance","valueAsBn","percentageOfMaxBalance","percentageDisplay","showFieldWarning","minBetAmountBalance","eq","key","lt","getButtonProps","bnValue","lte","data","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","isWarning","inputProps","balance","min","max","onValueChanged","newValue","step","valueLabel","percent","betMethod","decimalValue","getDecimalAmount","errorMsg","OpenRoundCard","isSettingPosition","setState","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","useBlockCountdown","SoonRoundCard","countdown","RoundCard","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","usePreviousValue","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","Math","floor","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","usePersistState","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","initialBlock","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","all","staticPredictionsData","latestRound","find","currentRoundStartBlock","futureRounds","halfInterval","i","push","roundData","fetchInitialData","PageLoader","BASE_BSC_SCAN_URL","getBscScanBlockCountdownUrl","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","eth","getBalance","walletBalance","fastRefresh","rawProgress","progress","primaryStep","secondsRemaining","setSecondsRemaining","getWeb3NoAccount","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown"],"mappings":"+IAcYA,E,mKAAAA,K,UAAAA,E,YAAAA,E,oBAAAA,E,aAAAA,M,KAOL,I,4CCyCKC,EDzCCC,EAAe,SAACC,GAC3B,GAAc,OAAVA,EACF,OAAO,KAGT,IAAMC,EAAWC,OAAOF,GACxB,OAAOE,OAAOC,MAAMF,GAAY,KAAOA,GAG5BG,EAA0B,SAACC,EAAeC,GACrD,MAAO,CACLC,GAAIF,EAAMG,WACVH,MAAOA,EAAMG,WACbF,WAAYA,EAAWE,WACvBC,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,UAAW,IACXC,YAAa,IACbC,SAAU,IACVC,SAAU,IACVC,WAAY,IACZC,WAAY,IACZC,SAAU,KACVC,KAAM,KAIGC,EAAuB,SAACC,GACnC,IAAMC,EAAM,CACVnB,GAAIkB,EAAYlB,GAChBoB,KAAMF,EAAYE,KAClBC,OAAQH,EAAYG,OAASC,WAAWJ,EAAYG,QAAU,EAC9DN,SAAmC,SAAzBG,EAAYH,SAAsBQ,IAAYC,KAAOD,IAAYE,KAC3EC,QAASR,EAAYQ,QACrBC,KAAM,CACJ3B,GAAIkB,EAAYS,KAAK3B,GACrB4B,QAASV,EAAYS,KAAKC,QAC1BC,MAAOrC,EAAa0B,EAAYS,KAAKE,OACrCpB,UAAWjB,EAAa0B,EAAYS,KAAKlB,WACzCqB,SAAUtC,EAAa0B,EAAYS,KAAKG,YAQ5C,OAJIZ,EAAYa,QACdZ,EAAIY,MAAQC,EAAuBd,EAAYa,QAG1CZ,GAGIa,EAAyB,SAACC,GAAyC,IAsBpDC,EApBxBlC,EAkBEiC,EAlBFjC,GACAF,EAiBEmC,EAjBFnC,MACAI,EAgBE+B,EAhBF/B,OACAH,EAeEkC,EAfFlC,WACAI,EAcE8B,EAdF9B,QACAC,EAaE6B,EAbF7B,OACAC,EAYE4B,EAZF5B,UACAC,EAWE2B,EAXF3B,UACAC,EAUE0B,EAVF1B,SACAC,EASEyB,EATFzB,WACAC,EAQEwB,EARFxB,UACAC,EAOEuB,EAPFvB,YACAE,EAMEqB,EANFrB,SACAD,EAKEsB,EALFtB,SACAE,EAIEoB,EAJFpB,WACAC,EAGEmB,EAHFnB,WACAC,EAEEkB,EAFFlB,SAlB2E,EAoBzEkB,EADFjB,YAnB2E,MAmBpE,GAnBoE,EAkC7E,MAAO,CACLhB,KACAE,SACAJ,MAAON,EAAaM,GACpBC,WAAYP,EAAaO,GACzBI,QAASX,EAAaW,GACtBC,OAAQZ,EAAaY,GACrBC,UAAWb,EAAaa,GACxBC,UAAWA,EAAYgB,WAAWhB,GAAa,KAC/CC,SAAUf,EAAae,GACvBC,WAAYA,EAAac,WAAWd,GAAc,KAClDC,UAAWjB,EAAaiB,GACxBC,YAAaA,EAAcY,WAAWZ,GAAe,EACrDE,SAAUpB,EAAaoB,GACvBD,SAAUnB,EAAamB,GACvBE,WAAYrB,EAAaqB,GACzBC,WAAYtB,EAAasB,GACzBC,UA7BwBmB,EA6BGnB,EA5BF,SAArBmB,EACKX,IAAYC,KAGI,SAArBU,EACKX,IAAYE,KAGd,MAqBPT,KAAMA,EAAKmB,IAAIlB,KAYNmB,EAAgB,SAACC,GAC5B,OAAOA,EAAOC,QAAO,SAACC,EAAOR,GAC3B,OAAO,2BACFQ,GADL,kBAEGR,EAAM/B,GAAK+B,MAEb,KAGQS,GAAiB,SAACrB,EAAUsB,GAAkC,IACjEV,EAAUZ,EAAVY,MACR,GAAIA,EAAM7B,OACR,OAAOZ,EAAOoD,SAGhB,GAAIX,EAAMjC,OAAS2C,EAAe,EAChC,OAAOnD,EAAOqD,KAEhB,IAAMC,EAAsBb,EAAMvB,WAAauB,EAAMzB,UAAYiB,IAAYC,KAAOD,IAAYE,KAEhG,OAAON,EAAIJ,WAAa6B,EAAsBtD,EAAOuD,IAAMvD,EAAOwD,MAMvDC,GAAc,SAAC5B,GAC1B,OAAQA,EAAIO,UAAYP,EAAIJ,WAAaI,EAAIY,MAAMhB,WAAiC,IAArBI,EAAIY,MAAM7B,SAc9D8C,GAAwB,uCAAG,4CAAAC,EAAA,+DAClBC,cAAZC,EAD8B,EAC9BA,QAD8B,SAE6CC,YAAiB,CAClGD,EAAQV,eAAeY,KACvBF,EAAQG,iBAAiBD,KACzBF,EAAQI,eAAeF,KACvBF,EAAQK,SAASH,KACjBF,EAAQM,eAAeJ,OAPa,0CAE/BZ,EAF+B,KAEjBa,EAFiB,KAEDC,EAFC,KAEaG,EAFb,KAEuBD,EAFvB,KAStCE,QAAQC,IAAInB,GAT0B,kBAU/B,CACLoB,OAAQH,EAAWI,IAAiBC,OAASD,IAAiBnB,KAC9DF,aAAc9C,OAAO8C,GACrBa,eAAgB3D,OAAO2D,GACvBG,aAAc9D,OAAO8D,GACrBF,iBAfoC,4CAAH,qDAmBxBS,GAAa,uCAAG,4BAAAf,EAAA,sEAIHgB,kBACtBC,IACAC,cAF8B,IAAD,oRE5IC,4NFwIL,cAIrBC,EAJqB,yBAsBpB,CACL/B,OAAQ+B,EAAS/B,OAAOF,IAAIH,GAC5BqC,QA5FoCC,EA4FJF,EAASC,OA3FpC,CACLrE,GAAIsE,EAAetE,GACnBwD,OAAQc,EAAed,OACvB1D,MAAOH,OAAO2E,EAAexE,MAAMA,WAgEV,iCApEU,IAACwE,IAoEX,OAAH,qDAmDbC,GAAa,uCAAG,8CAAAtB,EAAA,6DAC3BuB,EAD2B,+BACI,GAC/BC,EAF2B,+BAEnB,IACRC,EAH2B,+BAGpB,EAHoB,SAKJT,kBACrBC,IACAC,cAF6B,IAAD,uSE3KA,sDArBE,0NA6BD,yDFkL7B,CAAEM,QAAOC,OAAMF,UApBU,cAKrBJ,EALqB,yBAsBpBA,EAASpD,MAtBW,2CAAH,qDAyBb2D,GAAM,uCAAG,WAAOC,GAAP,eAAA3B,EAAA,sEACGgB,kBACrBC,IACAC,cAF6B,IAAD,sNEhMA,sDArBE,0NA6BD,yDFuM7B,CACEnE,GAAI4E,EAAMC,gBAjBM,cACdT,EADc,yBAoBbA,EAASjD,KApBI,2CAAH,sD,4DGrQb2D,GAAiC,CACrCjB,OAAQC,IAAiBiB,QACzBC,WAAW,EACXC,mBAAmB,EACnBC,iBAAiB,EACjBC,mBAAmB,EACnBC,cAAeC,IAAcC,IAC7B7C,aAAc,EACd8C,6BAA8B,EAC9BjC,eAAgB,IAChBG,aAAc,EACdF,aAAc,mBACdiC,gBAAiBC,KAASC,SAC1BrD,OAAQ,GACRsD,QAAS,GACT3E,KAAM,IAIK4E,GAAWC,aACtB,uBADsC,uCAEtC,mCAAA5C,EAAA,6DAAS6C,EAAT,EAASA,QAAS9F,EAAlB,EAAkBA,GAAlB,SACyB2E,GAAO3E,GADhC,cACQoE,EADR,OAEQjD,EAAMF,EAAqBmD,GAFnC,kBAGS,CAAE0B,UAAS3E,QAHpB,2CAFsC,uDAS3B4E,GAAgBF,aAG3B,4BAH2C,uCAGd,qCAAA5C,EAAA,6DAAS6C,EAAT,EAASA,QAASE,EAAlB,EAAkBA,QAAlB,SACFzB,GAAc,CACvC5C,KAAMmE,EAAQjB,cACd9C,MAAOiE,IAHoB,YACvBC,EADuB,SAQe,IAAxBA,EAAaC,OARJ,qCASLD,EATK,GASpB/E,EAToB,uBAUpB,CAAE4E,UAASE,UAAS7E,IAAKF,EAAqBC,KAV1B,gCAatB,CAAE4E,UAASE,UAAS7E,IAAK,OAbH,2CAHc,uDAsBhCgF,GAAmBN,aAG9B,+BAH8C,uCAGd,iCAAA5C,EAAA,6DAAS6C,EAAT,EAASA,QAASM,EAAlB,EAAkBA,SAAlB,SACL7B,GAAc,CACvC5C,KAAMmE,EAAQjB,cACdwB,SAAUD,IAHoB,cAC1BH,EAD0B,yBAMzB,CAAEH,UAAS9E,KAAMiF,EAAa9D,IAAIlB,KANT,2CAHc,uDAYnCqF,GAAeT,aAC1B,2BAD0C,uCAE1C,mCAAA5C,EAAA,6DAAS6C,EAAT,EAASA,QAASpE,EAAlB,EAAkBA,QAAlB,SACyB6C,GAAc,CACnC5C,KAAMmE,EAAQjB,cACdnD,YAHJ,cACQ0C,EADR,OAKQpD,EAAOoD,EAASjC,IAAIlB,GAL5B,kBAOS,CAAE6E,UAAS9E,SAPpB,2CAF0C,uDAa/BuF,GAAmBC,aAAY,CAC1CC,KAAM,cACN3B,gBACA4B,SAAU,CACRC,oBAAqB,SAACC,EAAOC,GAC3BD,EAAM/C,OAASgD,EAAOC,SAExBC,oBAAqB,SAACH,EAAOC,GAC3BD,EAAM3B,kBAAoB4B,EAAOC,QACjCF,EAAMxB,cAAgBC,IAAcC,KAEtC0B,kBAAmB,SAACJ,EAAOC,GACzBD,EAAM1B,gBAAkB2B,EAAOC,SAEjCG,iBAAkB,SAACL,EAAOC,GACxBD,EAAMxB,cAAgByB,EAAOC,SAE/BI,WAAY,SAACN,EAAOC,GAClB,OAAO,2BACFD,GACAC,EAAOC,UAGdK,iBAAkB,SAACP,EAAOC,GAAgE,IAAD,EAC5DA,EAAOC,QAA1BzE,EAD+E,EAC/EA,OAAQgC,EADuE,EACvEA,OACV+C,EAAehF,EAAcC,GAC7BgF,EAAuBC,KAAMjF,EAAQ,SAE3C,GAAIuE,EAAMnE,eAAiB4E,EAAqBvH,MAAO,CAErD,IAAMyH,EAAcD,KAAMjF,EAAQ,SAC5BmF,EAAcxF,EAClBnC,EAAwB0H,EAAYzH,MAAQ,EAAGyH,EAAYxH,WAAa6G,EAAMtD,iBAGhF8D,EAAaI,EAAYxH,IAAMwH,EAGjCZ,EAAMnE,aAAe4E,EAAqBvH,MAC1C6D,QAAQC,IAAIgD,EAAMnE,cAClBmE,EAAMrB,6BAA+B8B,EAAqBtH,WAC1D6G,EAAM/C,OAASQ,EAAOb,OAASM,IAAiBC,OAASD,IAAiBnB,KAC1EiE,EAAMvE,OAAN,2BAAoBuE,EAAMvE,QAAW+E,IAEvCK,gBAAiB,SAACb,EAAOC,GACvBD,EAAMnE,aAAeoE,EAAOC,SAE9BY,mBAAoB,SAACd,EAAOC,GAAiE,IAAD,EAC7DA,EAAOC,QAA5BhB,EADkF,EAClFA,QAASE,EADyE,EACzEA,QACX2B,EAAcf,EAAM5F,KAAK8E,GAE3B6B,GAAeA,EAAY3B,KAC7B2B,EAAY3B,GAAStE,SAAU,IAGnCkG,sBAAuB,SAAChB,EAAOC,GAA2E,IAAD,EACrEA,EAAOC,QAAjChB,EAD+F,EAC/FA,QAASE,EADsF,EACtFA,QAAS7E,EAD6E,EAC7EA,IAE1ByF,EAAM5F,KAAN,2BACK4F,EAAM5F,MADX,kBAEG8E,EAFH,2BAGOc,EAAM5F,KAAK8E,IAHlB,kBAIKE,EAAU7E,OAIjB0G,mBAAoB,SAACjB,EAAOC,GAC1BD,EAAMpB,gBAAkBqB,EAAOC,UAGnCgB,cAAe,SAACC,GAEdA,EAAQC,QAAQ7B,GAAiB8B,WAAW,SAACrB,EAAOC,GAAY,IAAD,EACnCA,EAAOC,QAAzBhB,EADqD,EACrDA,QACFoC,EAFuD,EAC5ClH,KACIsB,QAAO,SAACC,EAAOpB,GAClC,OAAO,2BACFoB,GADL,kBAEGpB,EAAIY,MAAM/B,GAAKmB,MAEjB,IAEHyF,EAAM5F,KAAOmH,KAAM,GAAIvB,EAAM5F,KAAX,eACf8E,EAAUoC,OAKfH,EAAQC,QAAQjC,GAAckC,WAAW,SAACrB,EAAOC,GAAY,IAAD,EACxBA,EAAOC,QAAjChB,EADkD,EAClDA,QAASE,EADyC,EACzCA,QAAS7E,EADgC,EAChCA,IAEtBA,IACFyF,EAAM5F,KAAN,2BACK4F,EAAM5F,MADX,kBAEG8E,EAFH,2BAGOc,EAAM5F,KAAK8E,IAHlB,kBAIKE,EAAU7E,UAOnB4G,EAAQC,QAAQpC,GAASqC,WAAW,SAACrB,EAAOC,GAAY,IAAD,EAC5BA,EAAOC,QAAxBhB,EAD6C,EAC7CA,QAAS3E,EADoC,EACpCA,IACjByF,EAAMjB,QAAQG,GAAd,sBAA6Bc,EAAMjB,QAAQG,GAASsC,QAAO,SAACC,GAAD,OAAgBA,EAAWrI,KAAOmB,EAAInB,OAAjG,CAAsGmB,OAIxG4G,EAAQC,QAAQ1B,GAAagC,SAAS,SAAC1B,GACrCA,EAAMzB,mBAAoB,KAE5B4C,EAAQC,QAAQ1B,GAAaiC,UAAU,SAAC3B,GACtCA,EAAMzB,mBAAoB,EAC1ByB,EAAM3B,mBAAoB,KAE5B8C,EAAQC,QAAQ1B,GAAa2B,WAAW,SAACrB,EAAOC,GAAY,IAAD,EAC/BA,EAAOC,QAAzBhB,EADiD,EACjDA,QAAS9E,EADwC,EACxCA,KAEjB4F,EAAMzB,mBAAoB,EAC1ByB,EAAM3B,mBAAoB,EAC1B2B,EAAMjB,QAAQG,GAAW9E,EAGzB,IAAMkH,EAAUlH,EAAKsB,QAAO,SAACC,EAAOpB,GAClC,OAAO,2BACFoB,GADL,kBAEGpB,EAAIY,MAAM/B,GAAKmB,MAEjB,IAEHyF,EAAM5F,KAAOmH,KAAM,GAAIvB,EAAM5F,KAAX,eACf8E,EAAUoC,U,GAkBf3B,GAAiBiC,QAVnBtB,G,GAAAA,WACAF,G,GAAAA,kBAEAC,I,GADAQ,gB,GACAR,kBACAF,G,GAAAA,oBACAI,G,GAAAA,iBACAO,G,GAAAA,mBACAf,G,GAAAA,oBACAiB,G,GAAAA,sBACAC,G,GAAAA,mB,IAGatB,GAAf,Q,kECzNekC,GAjBiB,WAAO,IAAD,EACVC,mBAASjD,MADC,mBAC7BkD,EAD6B,KACtBC,EADsB,OAEaC,eAAzCC,EAF4B,EAE5BA,YAA6BC,EAFD,EAEfC,eACfC,EAA0BC,eAWhC,OATAC,qBAAU,YACQ,uCAAG,4BAAAlG,EAAA,sEACMgG,EAAwB9F,QAAQiG,eAAe/F,OADrD,OACXe,EADW,OAEjBwE,EAASS,aAAiB,IAAIC,KAAUlF,GAAW,IAFlC,2CAAH,qDAKhBmF,KACC,CAACN,EAAyBH,EAAaF,IAEnC,CAAED,QAAOG,cAAaC,YCMhBS,GAtBY,WAAmB,IAAlBC,EAAiB,uDAAP,GAAO,EAChBhB,KAAnBE,EADmC,EACnCA,MAAOI,EAD4B,EAC5BA,QACTW,EAAWC,cAGjBR,qBAAU,WACRJ,IACA,IAAMa,EAAQC,aAAY,WACxBd,MACW,IAAVU,GAEH,OAAO,WACLK,cAAcF,MAEf,CAACH,EAASV,IAGbI,qBAAU,WACRO,EAAS7B,GAAmBc,EAAMjD,aACjC,CAACiD,EAAOe,KCCEK,GAjBU,WACvB,IAAML,EAAWC,cACT7D,EAAYkE,cAAZlE,QAERqD,qBAAU,WACR,IAAMS,EAAQC,YAAW,sBAAC,4BAAA5G,EAAA,sEACCe,KADD,OAClBiG,EADkB,OAGxBP,EAASvC,GAAiB8C,IAHF,2CAIvBC,KAEH,OAAO,WACLJ,cAAcF,MAEf,CAAC9D,EAAS4D,K,SCZAS,GARGC,KAAOC,IAAV,8JACC,qBAAGC,MAAkBC,OAAOC,UAAUC,a,2BCWhDC,GAAmBC,aAAH,+fAgChBC,GAAoBD,aAAH,qRAiBjBE,GAAoBC,aAAH,iDACRJ,IAGTK,GAAqBD,aAAH,iDACTF,IAGTI,GAAUZ,KAAOC,IAAV,2iBAcPQ,GAYAE,IAGF,qBAAGT,MAAkBW,aAAaC,MAUhCC,GAAQf,KAAOC,IAAV,sLAEW,qBAAGC,MAAkBC,OAAOa,aA6EnCC,GArEc,WAAO,IAAD,EACL3C,oBAAS,GADJ,mBAC1B4C,EAD0B,KAClBC,EADkB,KAEzBC,EAAMC,eAAND,EACFE,EAAMC,iBAAO,MACb/B,EAAQ+B,iBAAO,MACb7F,EAAYkE,cAAZlE,QACF8F,EAAmBC,cACnB5G,EAAoB6G,cACpBpC,EAAWC,cA4CjB,OAhCAR,qBAAU,WACR,IAAI4C,GAAc,EAkBlB,OAjBIjG,IACF8D,EAAMoC,QAAUnC,YAAW,sBAAC,8BAAA5G,EAAA,sEACPsB,GAAc,CAAE5C,KAAMmE,EAAQjB,cAAenD,SAAS,IAD/C,OACpBV,EADoB,OAGrB+K,IAEGE,EAAajL,EAAKoH,QAAO,SAACjH,GAC9B,OAAOA,EAAIJ,WAAaI,EAAIY,MAAMhB,YAG/BkE,GACHsG,EAAUU,EAAW/F,OAAS,IAVR,2CAazB,MAGE,WACL4D,cAAcF,EAAMoC,SACpBD,GAAc,KAEf,CAACjG,EAAS8D,EAAOgC,EAAkBL,EAAWtG,IAGjDkE,qBAAU,WACJlE,GACFsG,GAAU,KAEX,CAACtG,EAAmBsG,IAGrB,eAACW,GAAA,EAAD,CAAeC,GAAIb,EAAQc,eAAa,EAACC,QAASX,EAAKY,QAAS,IAAMC,WAAW,QAAjF,SACE,eAACvB,GAAD,CAASU,IAAKA,EAAd,SACE,gBAACP,GAAD,WACE,eAAC,KAAD,CAAgBqB,MAAM,OAAOC,MAAO,CAAEC,KAAM,QAAUC,GAAG,QACzD,eAAC,IAAD,CAAQF,MAAO,CAAEC,KAAM,GAAKE,QA/CV,WACxBlD,EAAS3C,IAAoB,KA8CvB,SACGyE,EAAE,sBAEL,eAAC,IAAD,CAAYqB,QAAQ,OAAOD,QA9Cf,WAClBrB,GAAU,GACVzB,cAAcF,EAAMoC,UA4Cd,SACE,eAAC,IAAD,CAAWc,MAAM,UAAUN,MAAM,mBC5KhCO,GAAgBC,6BAAuBC,GAerCC,GAbQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACXzE,mBAAqB,MADV,mBAChC0E,EADgC,KACxBC,EADwB,KAUvC,OAAO,eAACN,GAAcO,SAAf,CAAwB7N,MAAO,CAAE2N,SAAQC,YAAWE,cAPrC,WAChBH,IACFA,EAAOI,UACPH,EAAU,SAIP,SAAsEF,K,oDCZzEM,GAAmB,uCAAG,sBAAAxK,EAAA,+EAC1B,IAAIyK,SAAc,SAACC,GAAD,OAChBC,OAAOC,eAAeC,OAAQ,cAAe,CAC3CC,cAAc,EACdC,IAF2C,SAEvCvO,GACFwO,KAAKC,GAAKzO,EACVkO,EAAQlO,UANY,2CAAH,qDAWnB0O,GAAwB,SAACC,EAAqB9D,EAAqB+D,GAIvE,IAAID,EAAeE,OAAO,CACxBC,UAAU,EACVC,OAAQ,OACRC,OAAQ,kBACRC,SAAU,IACVC,SAAU,UACVrE,MAAOA,EAAMsE,OAAS,OAAS,QAC/BnC,MAAO,IACPoC,OAAQR,EACRS,WAAY,UACZC,mBAAmB,EACnBC,qBAAqB,EACrBC,aAAc,uBA2BHC,GAvBK,WAAO,IACjBC,EAAoB1D,eAApB0D,gBACF7E,EAAQ8E,eAcd,OAZAjG,qBAAU,WAEJ2E,OAAOoB,YAETf,GAAsBL,OAAOoB,YAAa5E,EAAO6E,EAAgBE,MAEjE5B,KAAsB6B,MAAK,SAACpB,GAC1BC,GAAsBD,EAAI5D,EAAO6E,EAAgBE,WAGpD,CAAC/E,EAAO6E,IAGT,eAAC,IAAD,CAAKI,SAAS,SAASC,UAAU,wBAAjC,SACE,sBAAKxP,GAAG,yBC1CRgL,GAAUZ,KAAOC,IAAV,+HAQPoF,GAAcrF,KAAOC,IAAV,oEAKXqF,GAAkBtF,KAAOC,IAAV,uIA2BNsF,GAlBmC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOzC,EAAe,EAAfA,SAC1D,OACE,eAAC,GAAD,UACE,gBAACsC,GAAD,WACE,eAACC,GAAD,UACE,sBAAKG,IAAI,uCAAuCC,IAAI,mBAAmBtB,OAAO,QAAQhC,MAAM,YAE9F,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAASuD,GAAG,OAAZ,SAAoBH,IACnBzC,aCtBE6C,GAnBW,WAAO,IACvBxE,EAAMC,eAAND,EACF9B,EAAWC,cAKjB,OACE,gBAAC,GAAD,CAAciG,MAAOpE,EAAE,SAAvB,UACE,eAAC,KAAD,CAAMyE,GAAG,IAAIF,GAAG,OAAhB,SACGvE,EAAE,0FAEL,eAAC,IAAD,CAAQqB,QAAQ,UAAUL,MAAM,OAAOI,QARjB,WACxBlD,EAAS3C,IAAoB,KAO3B,SACGyE,EAAE,sBCWI0E,GAxBW,WAAO,IACvB1E,EAAMC,eAAND,EACF9B,EAAWC,cAMjB,OACE,gBAAC,GAAD,CAAciG,MAAOpE,EAAE,kBAAvB,UACE,gBAAC,IAAD,CAAKuE,GAAG,OAAR,UACE,eAAC,KAAD,CAAME,GAAG,IAAT,SAAczE,EAAE,0DAChB,eAAC,KAAD,CAAMyE,GAAG,IAAT,SAAczE,EAAE,4CAChB,eAAC,KAAD,CAAMyE,GAAG,IAAT,SACGzE,EAAE,oGAGP,eAAC,IAAD,CAAQqB,QAAQ,UAAUL,MAAM,OAAOI,QAbjB,WACxBlD,EAAS3C,IAAoB,KAY3B,SACGyE,EAAE,sB,oBCnBE2E,GAAe,SAACC,GAC3B,OAAO/G,aAAiB+G,EAAO,KAEpBC,GAAiB,SAACC,GAC7B,OAAOC,aAAsBD,EAAU,IAG5BE,GAAY,SAACC,GACxB,MAAM,IAAN,OAAWC,aAAaD,GAAO,EAAG,EAAG,KAG1BE,GAAY,SAACC,GACxB,OAAOA,EAAMA,EAAIC,oBAAe5D,EAAW,CAAE6D,sBAAuB,EAAGC,sBAAuB,IAAO,KAO1FC,GAAU,SAACC,GAAD,OAAiBA,EAAIhR,WAAWiR,SAAS,EAAG,MAEtDC,GAAkB,SAACC,GAAkC,IAAD,EAC3BC,aAAeD,GAA3CE,EADuD,EACvDA,MAAOC,EADgD,EAChDA,QAAS9H,EADuC,EACvCA,QAClB+H,EAAc,UAAMR,GAAQO,GAAd,YAA0BP,GAAQvH,IAEtD,OAAI6H,EAAQ,EACJ,GAAN,OAAUN,GAAQM,GAAlB,YAA4BE,GAGvBA,GAGIC,GAAgB,SAACC,EAAerQ,GAC3C,OAAc,IAAVqQ,GAA0B,IAAXrQ,EACV,EAGFqQ,EAAQrQ,GAMJsQ,GAAY,SAACxQ,GACxB,IAAKA,IAAQA,EAAIY,MACf,OAAO,EAF4B,MAKWZ,EAAIY,MAA5CjB,EAL6B,EAK7BA,WAAYD,EALiB,EAKjBA,WAAYH,EALK,EAKLA,YAC1BkR,EAAaH,GAAc/Q,EAAaS,EAAIJ,WAAaQ,IAAYC,KAAOV,EAAaD,GAC/F,OAAOM,EAAIE,OAASuQ,GAITC,GAAyB,SAACvH,GACrC,OAAIA,EAAMsE,OACD,sEAGF,wE,6BC9BHkD,GAAQ1H,aAAO2H,KAAP3H,CAAH,kDAILsF,GAAkBtF,KAAOC,IAAV,iKA+FN2H,GAvF6D,SAAC,GAMtE,IALLC,EAKI,EALJA,OACAjM,EAII,EAJJA,QACAlG,EAGI,EAHJA,MACAoS,EAEI,EAFJA,UACAC,EACI,EADJA,UACI,EACkCzJ,oBAAS,GAD3C,mBACG0J,EADH,KACgBC,EADhB,KAEIvM,EAAYkE,cAAZlE,QACA0F,EAAMC,eAAND,EAHJ,EAIiC8G,eAA7BC,EAJJ,EAIIA,aAAcC,EAJlB,EAIkBA,WAChBC,EAAsBC,eACtBC,EAAeC,cACflJ,EAAWC,cAsCjB,OACE,gBAACmI,GAAD,CAAOe,SAAS,QAAQ9R,SAAS,WAAW+R,GAAG,QAA/C,UACE,eAAC,GAAD,UACE,sBAAKjD,IAAI,sCAAsCC,IAAI,mBAAmBtB,OAAO,QAAQhC,MAAM,YAE7F,gBAAC,KAAD,WACE,eAAC,KAAD,UACE,eAAC,IAAD,UAAUhB,EAAE,wBAEd,eAAC,KAAD,CAAkB0G,UAAWA,OAE/B,gBAAC,KAAD,CAAWa,EAAE,OAAb,UACE,eAAC,KAAD,CAAgBvG,MAAM,OAAOwG,GAAG,OAAOjD,GAAG,SAC1C,gBAAC,IAAD,CAAMkD,WAAW,QAAQC,eAAe,gBAAgBnD,GAAG,OAA3D,UACE,eAAC,KAAD,UAAOvE,EAAE,gBACT,gBAAC,IAAD,CAAKiB,MAAO,CAAE0G,UAAW,SAAzB,UACE,eAAC,KAAD,oBAAUxC,GAAUsB,GAApB,UACA,eAAC,KAAD,CAAMmB,SAAS,OAAOtG,MAAM,aAA5B,qBACQ6D,GAAUgC,EAAaU,MAAMpB,GAAQqB,qBAIjD,eAAC,IAAD,CACE9G,MAAM,OACNuD,GAAG,MACHnD,QA7DY,WAClB6F,EAAoBtP,QACjBoQ,MAAMzT,GACN0T,KAAK,CAAEC,KAAM3N,IACb4N,KAAK,WAAW,WACfrB,GAAe,MAEhBqB,KAAK,UANR,uCAMmB,WAAOC,GAAP,SAAA1Q,EAAA,0DACXkP,EADW,gCAEPA,IAFO,OAKfzI,EAAShC,GAAmB,CAAE5B,UAASE,aACvCkM,IACAG,GAAe,GACfE,EACE/G,EAAE,uBACF,gBAAC,IAAD,WACE,eAAC,KAAD,CAAMyE,GAAG,IAAIF,GAAG,MAAhB,SACGvE,EAAE,+CAEJmI,EAAOC,iBACN,eAAC,KAAD,CAAcC,KAAMC,aAAyBH,EAAOC,iBAApD,SACGpI,EAAE,yBAhBI,2CANnB,uDA4BGkI,KAAK,SAAS,SAACK,GACd1B,GAAe,GACfG,EAAWhH,EAAE,SAAH,OAAauI,QAAb,IAAaA,OAAb,EAAaA,EAAOC,SAC9BrQ,QAAQoQ,MAAMA,OA8BZ/O,UAAWoN,EACX6B,QAAS7B,EAAc,eAAC,IAAD,CAAe8B,MAAI,EAACpH,MAAM,iBAAoB,KALvE,SAOGtB,EAAE,oBC9FE2I,GArBqD,SAAC,GAQ9D,IAPLlC,EAOI,EAPJA,OACAjM,EAMI,EANJA,QACAlG,EAKI,EALJA,MACAsU,EAII,EAJJA,WACAjC,EAGI,EAHJA,UACAhF,EAEI,EAFJA,SACGkH,EACC,mFACoCC,aACtC,eAAC,GAAD,CAA2BrC,OAAQA,EAAQjM,QAASA,EAASlG,MAAOA,EAAOqS,UAAWA,KACtF,GAFKoC,EADH,oBAMJ,OACE,eAAC,IAAD,yBAAQ3H,QAAS2H,EAA+BC,SAAUJ,GAAgBC,GAA1E,aACGlH,MCyBQsH,GAxCqD,SAAC,GAA8C,IAA5C3U,EAA2C,EAA3CA,MAAOqS,EAAoC,EAApCA,UAAWhF,EAAyB,EAAzBA,SAAakH,EAAY,mDAC1E3L,oBAAS,GADiE,mBACzG0J,EADyG,KAC5FC,EAD4F,KAExG7G,EAAMC,eAAND,EACA1F,EAAYkE,cAAZlE,QACF2M,EAAsBC,eAJoF,EAK3EJ,eAA7BC,EALwG,EAKxGA,aAAcC,EAL0F,EAK1FA,WAuBtB,OACE,eAAC,IAAD,yBACE5F,QAvBkB,WACpB6F,EAAoBtP,QACjBoQ,MAAMzT,GACN0T,KAAK,CAAEC,KAAM3N,IACb4N,KAAK,WAAW,WACfrB,GAAe,MAEhBqB,KAAK,UANR,sBAMmB,sBAAAzQ,EAAA,0DACXkP,EADW,gCAEPA,IAFO,OAIfE,GAAe,GACfE,EAAa/G,EAAE,wBALA,4CAOhBkI,KAAK,SAAS,SAACK,GACd1B,GAAe,GACfG,EAAWhH,EAAE,SAAH,OAAauI,QAAb,IAAaA,OAAb,EAAaA,EAAOC,SAC9BrQ,QAAQoQ,MAAMA,OAOhB/O,UAAWoN,EACX6B,QAAS7B,EAAc,eAAC,IAAD,CAAe8B,MAAI,EAACpH,MAAM,UAAa,MAC1DuH,GAJN,aAMGlH,GAAY3B,EAAE,wBCtCfkJ,GAAYtK,aAAOuK,IAAPvK,CAAH,+EACO,gBAAGwK,EAAH,EAAGA,GAAH,SAAOtK,MAAkBC,OAAOqK,MAIzCC,GAA0B,SAAC,GAAgE,IAAD,IAA7DD,UAA6D,MAAxD,UAAwD,EAA7CE,EAA6C,EAA7CA,UAAW3H,EAAkC,EAAlCA,SAAUP,EAAwB,EAAxBA,QAAYyH,EAAY,wDAC/FU,EAAOD,GAAa,eAAC,IAAD,CAAahI,MAAM,UAE7C,OACE,gBAAC4H,GAAD,yBACEzB,WAAW,SACXC,eAAe,SACf8B,aAAa,MACbJ,GAAIA,EACJK,GAAG,MACHC,GAAG,MACHtI,QAASA,EACTH,MAAO,CAAE0I,OAAQvI,EAAU,UAAY,WACnCyH,GATN,cAWGU,EACD,eAAC,KAAD,CAAMK,cAAc,YAAYtI,MAAM,QAAQuI,GAAG,MAAjD,SACGlI,SAqBMmI,GAXiC,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,YAAapI,EAAyB,EAAzBA,SAAakH,EAAY,2CACjFmB,EAAeD,IAAgBhU,IAAYC,KAC3CuT,EAAOS,EAAe,eAAC,IAAD,CAAa1I,MAAM,UAAa,eAAC,IAAD,CAAeA,MAAM,UAEjF,OACE,eAAC,GAAD,yBAAK8H,GAAIY,EAAe,UAAY,UAAWV,UAAWC,GAAUV,GAApE,aACGlH,M,UCpCDsI,GAA0B,SAAC/U,GAC/B,OAAKA,EAIEgV,aAAYhV,GAHV,KAMLiV,GAAM,SAAC,GAA4B,IAA1BxI,EAAyB,EAAzBA,SAAakH,EAAY,6BACtC,OACE,eAAC,IAAD,yBAAMpB,WAAW,SAASC,eAAe,iBAAoBmB,GAA7D,aACGlH,MAKMyI,GAA4C,SAAC,GAA+B,IAA7BlV,EAA4B,EAA5BA,YAAgB2T,EAAY,gCAC9E7I,EAAMC,eAAND,EAER,OACE,gBAAC,GAAD,2BAAS6I,GAAT,cACE,gBAAC,KAAD,CAAMwB,MAAI,EAAV,UAAYrK,EAAE,cAAd,OACA,eAAC,KAAD,CAAMqK,MAAI,EAAV,mBAAeJ,GAAwB/U,GAAvC,kBAYOoV,GAAsC,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,cAAenE,EAAmC,EAAnCA,WAAYvQ,EAAuB,EAAvBA,OAAWgT,EAAY,wDAC9F7I,EAAMC,eAAND,EACFwK,EAAmB,UAAMpE,EAAWf,oBAAe5D,EAAW,CAAE8D,sBAAuB,IAApE,KAEzB,OACE,gBAAC,GAAD,yBAAKvC,OAAO,QAAW6F,GAAvB,cACE,gBAAC,KAAD,CAAMjB,SAAS,OAAOgC,cAAc,YAApC,UACGW,EADH,OAGA,gBAAC,IAAD,CAAM9C,WAAW,SAAjB,UACE,eAAC,KAAD,CAAMG,SAAS,OAAO6C,WAAW,OAAOJ,MAAI,EAA5C,SACGrK,EAAE,sBAAuB,CAAEoG,WAAYoE,MAE1C,eAAC,KAAD,CAAMhD,GAAG,MAAT,eACA,eAAC,KAAD,CAAMI,SAAS,OAAO6C,WAAW,OAAjC,mBAA4CP,aAAYrU,GAAxD,qBAWK6U,GAA4C,SAAC,GAA6B,IAA3B5V,EAA0B,EAA1BA,UAAc+T,EAAY,8BAC5E7I,EAAMC,eAAND,EAER,OACE,gBAAC,GAAD,2BAAS6I,GAAT,cACE,gBAAC,KAAD,CAAMjB,SAAS,OAAf,UAAuB5H,EAAE,gBAAzB,OACA,eAAC,KAAD,CAAM4H,SAAS,OAAf,SAAuB5C,aAAUlQ,UAuCjC6V,GAAa/L,aAAOgM,IAAPhM,CAAH,yFA1BW,SAAC,GAM0B,IALpDE,EAKmD,EALnDA,MACAiL,EAImD,EAJnDA,YACAc,EAGmD,EAHnDA,OACAC,EAEmD,EAFnDA,OACAC,EACmD,EADnDA,WAEA,OAAIF,EACK,oDAGLE,GAAcD,EACThM,EAAMC,OAAOa,UAGlBmK,IAAgBhU,IAAYC,KACvB8I,EAAMC,OAAOiM,QAGlBjB,IAAgBhU,IAAYE,KACvB6I,EAAMC,OAAOkM,QAGfnM,EAAMC,OAAOmM,cAShBC,GAAuBvM,KAAOC,IAAV,0FACV,qBAAGC,MAAkBsM,KAAKC,cAK7BC,GAAgD,SAAC,GAMvD,IAAD,IALJT,cAKI,aAJJE,kBAII,aAHJD,cAGI,SAFJnJ,EAEI,EAFJA,SACGkH,EACC,4DACJ,OACE,eAAC8B,GAAD,yBAAYE,OAAQA,EAAQE,WAAYA,EAAYD,OAAQA,GAAYjC,GAAxE,aACE,eAACsC,GAAD,UAAuBxJ,QC9Fd4J,GA/BiC,SAAC,GAAmC,IAAjChV,EAAgC,EAAhCA,MAAOoL,EAAyB,EAAzBA,SAAakH,EAAY,qCACzE/T,EAAuCyB,EAAvCzB,UAAWE,EAA4BuB,EAA5BvB,WAAYE,EAAgBqB,EAAhBrB,YACzB6U,EAAc/U,EAAaF,EAAYiB,IAAYC,KAAOD,IAAYE,KACtEuV,EAAezB,IAAgBhU,IAAYC,KACzCgK,EAAMC,eAAND,EACFyL,EAAkBzW,EAAaF,EAErC,OACE,gBAAC,GAAD,yBAAgBiV,YAAaA,GAAiBlB,GAA9C,cACE,eAAC,KAAD,CAAMvH,MAAM,aAAasG,SAAS,OAAOyC,MAAI,EAACT,cAAc,YAAYrF,GAAG,MAA3E,SACGvE,EAAE,kBAEJzJ,EAAM7B,OACL,eAAC,KAAD,CAAM2V,MAAI,EAACT,cAAc,YAAYtI,MAAM,eAAeiD,GAAG,OAAOqD,SAAS,OAA7E,SACG5H,EAAE,cAGL,gBAAC,IAAD,CAAMyH,WAAW,SAASC,eAAe,gBAAgBnD,GAAG,OAA5D,UACE,eAAC,KAAD,CAAMjD,MAAOkK,EAAe,UAAY,UAAWnB,MAAI,EAACzC,SAAS,OAAjE,SACG5C,GAAUhQ,KAEb,eAAC,GAAD,CAAa+U,YAAaA,EAA1B,SAAwC/E,GAAUyG,QAGrD3W,GAAa,eAAC,GAAD,CAAcA,UAAWA,IACvC,eAAC,GAAD,CAAcI,YAAaA,IAC1ByM,OCTQ+J,GAzBS,SAACpX,GAAmB,IAAD,EACD4I,oBAAS,GADR,mBAClCyO,EADkC,KACpBC,EADoB,KAEnC3E,EAAsBC,eACpB5M,EAAYkE,cAAZlE,QAmBR,OAjBAqD,qBAAU,WAYJrD,GAXuB,uCAAG,4BAAA7C,EAAA,sEACLwP,EAAoBtP,QAAQkU,UAAUvX,EAAOgG,GAASzC,OADjD,mDAIDoP,EAAoBtP,QAAQmU,WAAWxX,EAAOgG,GAASzC,OAJtD,OAIpBiU,EAJoB,OAK1BF,EAAgBE,GALU,wBAO1BF,GAAgB,GAPU,4CAAH,oDAYzBG,KAED,CAACzR,EAAShG,EAAO2S,EAAqB2E,IAElC,CAAED,eAAcC,oBCLnBI,GAAkBpN,aAAOgM,IAAPhM,CAAH,wHACC,qBAAGE,MAAkBC,OAAOkN,gBA2HnCC,GArH6B,SAAC,GAAqB,IAAnBvW,EAAkB,EAAlBA,IAAKwS,EAAa,EAAbA,OAC1CnI,EAAMC,eAAND,EACF9B,EAAWC,cACT7D,EAAYkE,cAAZlE,QACAqR,EAAiBD,GAAgB/V,EAAIY,MAAMjC,OAA3CqX,aACFxE,EAAeC,cACf+E,EAAWC,YAAe9R,EAAS3E,EAAIY,MAAM/B,IAG7CiS,EAAS0B,IAAWrU,EAAOuD,IAAM8O,GAAUxQ,GAAOA,EAAIE,OAEtDwW,EAAiB,WACrB,OAAQlE,GACN,KAAKrU,EAAOuD,IACV,MAAO,UACT,KAAKvD,EAAOwD,KACV,MAAO,aACT,KAAKxD,EAAOoD,SACV,MAAO,eACT,QACE,MAAO,SAyCPoV,EAAa,uCAAG,sBAAA7U,EAAA,sEACdyG,EAAS9D,GAAS,CAAEE,UAAS9F,GAAImB,EAAInB,MADvB,2CAAH,qDAInB,OACE,uCACE,gBAAC,IAAD,CAAMiT,WAAW,SAASC,eAAe,gBAAgBnD,GAAG,MAA5D,UACE,eAAC,IAAD,UAAUvE,EAAE,kBACZ,gBAAC,IAAD,CAAMyH,WAAW,SAAjB,UACE,eAAC,IAAD,CAAShD,GAAG,KAAKnD,MAAO+K,IAAkBzC,cAAc,YAAYS,MAAI,EAAClJ,GAAG,MAA5E,SA9Cc,WACpB,OAAQgH,GACN,KAAKrU,EAAOuD,IACV,OAAO2I,EAAE,OACX,KAAKlM,EAAOwD,KACV,OAAO0I,EAAE,QACX,KAAKlM,EAAOoD,SACV,OAAO8I,EAAE,YACX,QACE,MAAO,IAsCFuM,KAlCW,WACpB,OAAQpE,GACN,KAAKrU,EAAOuD,IACV,OAAO,eAAC,KAAD,CAAWiK,MAAO+K,MAC3B,KAAKvY,EAAOwD,KACZ,KAAKxD,EAAOoD,SACV,OAAO,eAAC,IAAD,CAAWoK,MAAO+K,MAC3B,QACE,OAAO,MA4BJG,SAGL,gBAACR,GAAD,WACG7D,IAAWrU,EAAOuD,MAAQ8U,GACzB,eAAC,GAAD,CACE1F,OAAQA,EACRjM,QAAS7E,EAAIY,MAAM/B,GACnBF,MAAOqB,EAAIY,MAAMjC,MACjBsU,YAAauD,EACbnL,MAAM,OACNuD,GAAG,OACHoC,UAAW2F,EAPb,SASGtM,EAAE,sBAGNmI,IAAWrU,EAAOoD,UAAYyU,GAC7B,eAAC,GAAD,CAAuBrX,MAAOqB,EAAIY,MAAMjC,MAAO0M,MAAM,OAAOuD,GAAG,SAEjE,gBAAC,IAAD,CAAMkD,WAAW,SAASC,eAAe,gBAAgBnD,GAAG,OAA5D,UACE,eAAC,KAAD,UAAOvE,EAAE,oBACT,eAAC,GAAD,CAAa+J,YAAapU,EAAIJ,SAA9B,SACGI,EAAIJ,WAAaQ,IAAYC,KAAOgK,EAAE,MAAQA,EAAE,aAGrD,gBAAC,IAAD,CAAMyH,WAAW,SAASC,eAAe,gBAAgBnD,GAAG,OAA5D,UACE,eAAC,KAAD,UAAOvE,EAAE,mBACT,eAAC,KAAD,oBAAUmF,GAAUxP,EAAIE,QAAxB,aAEF,gBAAC,IAAD,CAAM4R,WAAW,QAAQC,eAAe,gBAAxC,UACE,eAAC,KAAD,CAAM2C,MAAI,EAAV,SAAYrK,EAAE,iBACd,gBAAC,IAAD,CAAKiB,MAAO,CAAE0G,UAAW,SAAzB,UACE,eAAC,KAAD,CAAM0C,MAAI,EAAC/I,MAzDE,WACrB,OAAQ6G,GACN,KAAKrU,EAAOuD,IACV,MAAO,UACT,KAAKvD,EAAOwD,KACV,MAAO,UACT,KAAKxD,EAAOoD,SACZ,QACE,MAAO,QAiDeuV,GAAlB,mBAAwCtE,IAAWrU,EAAOwD,KAAO,IAAM,KAAvE,OAA6E6N,GAAUsB,GAAvF,UACA,eAAC,KAAD,CAAMmB,SAAS,OAAOtG,MAAM,aAA5B,qBACQ6D,GAAUgC,EAAaU,MAAMpB,GAAQqB,4BCxHnD4E,GAAmB9N,KAAOC,IAAV,yGACA,qBAAGC,MAAkBC,OAAO4N,YACrB,qBAAG7N,MAAkBC,OAAOmM,cAyC1C0B,GArC+B,SAAC,GAAqB,IAAnBjX,EAAkB,EAAlBA,IAAKwS,EAAa,EAAbA,OAC5CnI,EAAMC,eAAND,EADyD,EAEjBrK,EAAIY,MAA5CrB,EAFyD,EAEzDA,YAAaI,EAF4C,EAE5CA,WAAYD,EAFgC,EAEhCA,WAC3BwX,EAAiB5G,GAAc/Q,EAAaI,GAC5CwX,EAAiB7G,GAAc/Q,EAAaG,GAElD,OACE,gBAACqX,GAAD,WACGvE,IAAWrU,EAAOoD,UACjB,eAAC,KAAD,CAAMuN,GAAG,IAAInD,MAAM,UAAUiD,GAAG,OAAhC,SACGvE,EACC,wHAILmI,IAAWrU,EAAOqD,MAAQ,eAAC,GAAD,CAAWxB,IAAKA,EAAKwS,OAAQA,IACxD,eAAC,IAAD,CAAS5D,GAAG,MAAZ,SAAmBvE,EAAE,mBACrB,gBAAC,GAAD,CAAazJ,MAAOZ,EAAIY,MAAOgO,GAAG,OAAlC,UACE,eAAC,GAAD,CAAWgG,cAAevK,EAAE,MAAOoG,WAAYyG,EAAgBhX,OAAQP,IACvE,eAAC,GAAD,CAAWiV,cAAevK,EAAE,QAASoG,WAAY0G,EAAgBjX,OAAQR,OAE3E,gBAAC,IAAD,CAAMoS,WAAW,SAASC,eAAe,gBAAgBnD,GAAG,MAA5D,UACE,eAAC,KAAD,UAAOvE,EAAE,mBACT,eAAC,KAAD,CAAMqI,KAAM0E,aAAyBpX,EAAIY,MAAM1B,WAAYmY,UAAQ,EAAnE,SACGrX,EAAIY,MAAM1B,eAGf,gBAAC,IAAD,CAAM4S,WAAW,SAASC,eAAe,gBAAzC,UACE,eAAC,KAAD,UAAO1H,EAAE,mBACT,eAAC,KAAD,CAAMqI,KAAM0E,aAAyBpX,EAAIY,MAAMxB,UAAWiY,UAAQ,EAAlE,SACGrX,EAAIY,MAAMxB,kBC1BfkY,GAAYrO,aAAOuK,KAAM+D,MAAM,CAAEzF,WAAY,SAAUF,EAAG,QAA9C3I,CAAH,2GACO,qBAAGE,MAAkBsM,KAAKC,cACnB,qBAAGvM,MAAkBC,OAAOmM,cAInDiC,GAAavO,aAAOgM,IAAPhM,CAAH,wCA+HDwO,GA3H2B,SAAC,GAAa,IAwB9BjF,EAxBmBxS,EAAU,EAAVA,IAAU,EACzBuH,oBAAS,GADgB,mBAC9C4C,EAD8C,KACtCC,EADsC,KAE7ClK,EAAkBF,EAAlBE,OAAQU,EAAUZ,EAAVY,MAERyJ,EAAMC,eAAND,EACA1F,EAAYkE,cAAZlE,QACFrD,EAAeoW,cACfhV,EAASgI,cA6BTiN,EAActW,GAAerB,EAAKsB,GAClCsW,EA1BgB,SAACpF,GACrB,OAAQA,GACN,KAAKrU,EAAOuD,IACV,MAAO,UACT,KAAKvD,EAAOwD,KACV,MAAO,UACT,KAAKxD,EAAOoD,SACV,MAAO,eACT,QACE,MAAO,QAiBWsW,CAAcF,GAChCG,GAdkBtF,EAcgBmF,KAbvBxZ,EAAOwD,KACb,IAGL6Q,IAAWrU,EAAOuD,IACb,IAGF,GAMHqW,EAAcnX,EAAMjC,QAAU2C,EAC9B0W,EAActV,IAAWC,IAAiBnB,MAAQZ,EAAMjC,QAAU2C,EAAe,EACjFkV,EAAWC,YAAe9R,EAAS3E,EAAIY,MAAM/B,IAG7CiS,EAAS6G,IAAgBxZ,EAAOuD,IAAM8O,GAAUxQ,GAAOE,EAqC7D,OACE,uCACE,gBAACoX,GAAD,CAAW7L,QA1EI,kBAAMrB,GAAWD,IA0EA8N,KAAK,SAArC,UACE,eAAC,IAAD,CAAK5M,MAAM,OAAX,SACE,gBAAC,KAAD,CAAM2G,UAAU,SAAhB,UACE,eAAC,KAAD,CAAMC,SAAS,OAAOtG,MAAM,aAA5B,SACGtB,EAAE,WAEL,eAAC,KAAD,CAAMqK,MAAI,EAACI,WAAY,EAAvB,SACGlU,EAAMjC,MAAM+Q,wBAInB,eAAC8H,GAAD,CAAYzD,GAAG,OAAf,SA/CAgE,EAEA,gBAAC,IAAD,CAAMjG,WAAW,SAAjB,UACE,eAAC,KAAD,CAAUnG,MAAM,UAAUH,GAAG,MAAMH,MAAM,SACzC,eAAC,KAAD,CAAMM,MAAM,UAAU+I,MAAI,EAA1B,SACGrK,EAAE,sBAMP2N,EAEA,gBAAC,IAAD,CAAMlG,WAAW,SAAjB,UACE,eAAC,KAAD,CAAuBnG,MAAM,YAAYH,GAAG,MAAMH,MAAM,SACxD,eAAC,KAAD,CAAMM,MAAM,YAAY+I,MAAI,EAA5B,SACGrK,EAAE,iBAOT,uCACE,eAAC,KAAD,CAAM4H,SAAS,OAAOtG,MAAM,aAA5B,SACGtB,EAAE,iBAEL,eAAC,KAAD,CAAMqK,MAAI,EAAC/I,MAAOiM,EAAiB9C,WAAY,EAA/C,SACG6C,IAAgBxZ,EAAOoD,SAAW8I,EAAE,YAApC,UAAqDyN,GAArD,OAAwEtI,GAAUsB,WAoBpF6G,IAAgBxZ,EAAOuD,KAAO8U,GAC7B,eAAC,GAAD,CACEvD,YAAauD,EACb3R,QAAS7E,EAAIY,MAAM/B,GACnBF,MAAOqB,EAAIY,MAAMjC,MACjBmS,OAAQA,EACRoH,MAAM,KACN1M,GAAG,MANL,SAQGnB,EAAE,aAGNsN,IAAgBxZ,EAAOoD,UAAYiV,GAClC,eAAC,GAAD,CAAuB7X,MAAOqB,EAAIY,MAAMjC,MAAOuZ,MAAM,KAAK1M,GAAG,MAA7D,SACGnB,EAAE,cAGL0N,IAAgBC,GAChB,eAAC,IAAD,CAAYtM,QAAQ,OAAOwM,MAAM,KAAjC,SACG/N,EAAS,eAAC,IAAD,IAAoB,eAAC,IAAD,SAInCA,GAAU,eAAC,GAAD,CAAYnK,IAAKA,EAAKwS,OAAQnR,GAAerB,EAAKsB,SvBrI7D6W,GAASlP,KAAOmP,MAAV,wHAONC,GAAepP,aAAOgM,IAAPhM,CAAH,iFACF,gBAAGE,EAAH,EAAGA,MAAH,OAAeuH,GAAuBvH,MAKhDmP,GAAsBrP,KAAOC,IAAV,uHAWnBqP,GAAgB,SAACtU,GACrB,OAAQA,GACN,KAAKC,IAAcsU,UACjB,OAAO,EACT,KAAKtU,IAAcuU,YACjB,OAAO,EACT,KAAKvU,IAAcC,IACnB,QACE,U,SASM/F,O,mBAAAA,I,cAAAA,M,KAKZ,I,wHA+Eesa,GA/EuB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC5C3U,EAAgB4U,cAChB7U,EAAoB8U,cAClBzO,EAAMC,eAAND,EACF9B,EAAWC,cACT7D,EAAYkE,cAAZlE,QAMFoU,EAAe,SAACC,GAAD,6BAA8B,sBAAAlX,EAAA,yDAC7CkX,IAAc/U,EAD+B,gCAEzCsE,EAASpD,GAAa,CAAER,UAASpE,QAASgY,GAAcS,MAFf,OAG/CzQ,EAASzC,GAAiBkT,IAHqB,4CAO7CC,EAAS,uCAAG,WAAOC,GAAP,SAAApX,EAAA,6DAChB8W,EAAaM,GADG,SAEVH,EAAa7U,IAAcC,IAA3B4U,GAFU,2CAAH,sDAKf,OACE,gBAACV,GAAD,WACE,gBAAC,IAAD,CAAMvG,WAAW,SAASC,eAAe,gBAAgBnD,GAAG,OAA5D,UACE,eAAC,IAAD,CAASE,GAAG,KAAKqK,KAAK,KAAtB,SACG9O,EAAE,aAEL,eAAC,IAAD,CAAQoB,QAtBM,WAClBlD,EAAS3C,IAAoB,KAqBK8F,QAAQ,OAAOoH,QAAS,eAAC,IAAD,CAAkBnH,MAAM,YAAcoI,GAAG,IAA/F,SACG1J,EAAE,cAGP,eAACiO,GAAD,UACE,gBAAC,IAAD,CAAYc,YAAaT,EAAWT,MAAM,KAAKxM,QAAQ,SAAS2N,YAAaJ,EAA7E,UACE,eAAC,IAAD,UAAiB5O,EAAE,YACnB,eAAC,IAAD,UAAiBA,EAAE,cAGtBsO,IAAcva,EAAYkb,QACzB,uCACE,eAAC,KAAD,CAAM3N,MAAM,aAAasG,SAAS,OAAOrD,GAAG,MAA5C,SACGvE,EAAE,YAEL,gBAAC,IAAD,CAAMyH,WAAW,SAAjB,UACE,gBAACqG,GAAD,WACE,eAAC,KAAD,CACED,MAAM,KACNqB,QAAStV,IAAkBC,IAAcC,IACzCkP,SAAUrP,IAAsBW,EAChC6U,SAAUT,EAAa7U,IAAcC,OAEvC,eAAC,KAAD,CAAM+P,GAAG,MAAT,SAAgB7J,EAAE,YAEpB,gBAAC8N,GAAD,WACE,eAAC,KAAD,CACED,MAAM,KACNqB,QAAStV,IAAkBC,IAAcsU,UACzCnF,SAAUrP,IAAsBW,EAChC6U,SAAUT,EAAa7U,IAAcsU,aAEvC,eAAC,KAAD,CAAMtE,GAAG,MAAT,SAAgB7J,EAAE,kBAEpB,gBAAC8N,GAAD,WACE,eAAC,KAAD,CACED,MAAM,KACNqB,QAAStV,IAAkBC,IAAcuU,YACzCpF,SAAUrP,IAAsBW,EAChC6U,SAAUT,EAAa7U,IAAcuU,eAEvC,eAAC,KAAD,CAAMvE,GAAG,MAAT,SAAgB7J,EAAE,8B,UwBtGjBoP,GAvB6B,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,cAAe7Z,EAAW,EAAXA,KACpDwK,EAAMC,eAAND,EAER,OAAOqP,EACL,qCACGC,mBAAQ9Z,EAAM,CAAC,eAAgB,CAAC,SAASmB,KAAI,SAAChB,GAAD,OAC5C,eAAC,GAAD,CAA4BA,IAAKA,GAAbA,EAAInB,SAI5B,gBAAC,IAAD,CAAK+S,EAAE,OAAP,UACE,eAAC,IAAD,CAASuH,KAAK,KAAKnH,UAAU,SAASpD,GAAG,MAAzC,SACGvE,EAAE,qCAEL,eAAC,KAAD,CAAMyE,GAAG,IAAIkD,UAAU,SAAvB,SACG3H,EACC,2HCTGuP,GAAgBpQ,aAAH,gIAKF,qBAAGzE,UAId8U,GAAkBrQ,aAAH,iHAKH,SAAC0J,GAAD,OAAYA,EAAM4G,UAI9BC,GAAM9Q,KAAO+Q,IAAV,+FAMVC,GAAehR,KAAOiR,OAAV,4FAGI,SAAChH,GAAD,gBAAcA,EAAMnO,OAApB,eAGToV,GAAYlR,aAAOgR,GAAPhR,CAAH,4EAEP2Q,IAGFQ,GAAWnR,aAAOgR,GAAPhR,CAAH,qHAEE,SAACiK,GAAD,OAAYA,EAAM4G,SAC1BF,GAA0BC,IAG5BhQ,GAAUZ,KAAOC,IAAV,wFAMPmR,GAAOpR,KAAOC,IAAV,wPClDXoR,GAAgB,QA4BPC,GA1B2B,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACzCpQ,EAAMC,eAAND,EACFqQ,GAAwB,IAAND,GAAcD,EAAOC,IAAME,QAAQ,GACrDC,EAAaJ,GAAQC,EAAMD,GAASF,GACpCO,EAAWP,GAAgBM,EACjC,OACE,gBAAC,GAAD,WACE,gBAACb,GAAD,CAAKe,QAAQ,cAAb,UACE,eAACX,GAAD,CAAWY,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAKlW,OAAQ6V,IAC1C,eAACR,GAAD,CAAUW,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAKlW,OAAQ8V,EAAUf,OAAQc,OAE7D,gBAACP,GAAD,WACE,eAAC,KAAD,CAAMa,OAAK,EAACpG,WAAW,IAAvB,SACGzK,EAAE,SAEL,gBAAC,KAAD,CAAMqK,MAAI,EAACzC,SAAS,OAAO6C,WAAW,IAAtC,UACG2F,EADH,IACSA,EAAMD,KAEf,gBAAC,KAAD,CAAMU,OAAK,EAACpG,WAAW,IAAInJ,MAAM,aAAjC,UACG+O,EADH,cCtBFS,GAAoB,CACxBV,IAAK,UACLD,KAAM,UACNY,QAAS,QAGLC,GAAmB,CACvBZ,IAAK,IACLD,KAAM,IACNY,QAAS,IAwCIE,GArC+B,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,QAAShK,EAAmB,EAAnBA,aACtDnH,EAAMC,eAAND,EAEFsB,EAAQwP,GAAkBI,GAHiD,EAItDC,EAAQD,GAA3Bra,EAJyE,EAIzEA,OAAQhB,EAJiE,EAIjEA,OAEVub,GAA8B,IAATva,EADPsa,EAAQJ,QAAQla,QACoByZ,QAAQ,GAC1De,EAAqBH,EAAKI,OAAO,GAAGC,cAAgBL,EAAKM,MAAM,GAC/DC,EAAyB,QAATP,EAAiBC,EAAQD,GAAMzK,OAAS5Q,EAE9D,OACE,uCACE,eAAC,KAAD,CAAMyR,GAAG,OAAO+C,MAAI,EAAC/I,MAAM,aAA3B,SACGtB,EAAEqR,KAEL,gBAAC,IAAD,WACE,gBAAC,IAAD,CAAMnQ,KAAK,IAAIwQ,cAAc,SAA7B,UACE,gBAAC,KAAD,CAAMrH,MAAI,EAACzC,SAAS,OAAOtG,MAAOA,EAAlC,UACGzK,EADH,IACYmJ,EAAE,UAAU2R,uBAExB,eAAC,KAAD,CAAM/J,SAAS,OAAOtG,MAAM,aAA5B,SACY,YAAT4P,EAAqBlR,EAAE,SAAS2R,oBAAhC,UAAyDP,EAAzD,UAGL,gBAAC,IAAD,CAAMlQ,KAAK,IAAIwQ,cAAc,SAA7B,UACE,eAAC,KAAD,CAAMrH,MAAI,EAACzC,SAAS,OAAOtG,MAAOA,EAAlC,mBACM0P,GAAiBE,IADvB,OAC+B/L,aAAUsM,GADzC,UAGA,eAAC,KAAD,CAAM7J,SAAS,OAAOtG,MAAM,aAA5B,qBACQ6D,aAAUgC,EAAaU,MAAM4J,GAAe3J,yBClBxD8J,GAAUhT,KAAOC,IAAV,8GACS,qBAAGC,MAAkBC,OAAO8S,sBAM5CC,GAAgC,CACpC1B,IAAK,CACHvZ,OAAQ,EACRhB,OAAQ,EACR4Q,OAAQ,EACRsL,UAAW,CACTvd,GAAI,IACJiS,OAAQ,EACRL,WAAY,IAGhB+J,KAAM,CACJtZ,OAAQ,EACRhB,OAAQ,GAEVkb,QAAS,CACPla,OAAQ,EACRhB,OAAQ,IAINmc,GAAgB,SAACxc,EAAayB,GAClC,OAAOzB,EAAKsB,QAAO,SAACqa,EAAqBxb,GACvC,IAAM2X,EAActW,GAAerB,EAAKsB,GACxC,GAAIqW,IAAgBxZ,EAAOuD,IAAK,CAC9B,IAAMoP,EAtCS,SAAC9Q,GACpB,IAAMsc,EAAY9L,aAAUxQ,GAE5B,OAAOsc,EALY,IAIPA,EACatc,EAAIE,OAmCVqc,CAAavc,GACtBoc,EAAcZ,EAAQf,IAAtB2B,UACN,GAAItL,EAASsL,EAAUtL,OAAQ,CAAC,IAAD,EACmB9Q,EAAIY,MAA5CjB,EADqB,EACrBA,WAAYD,EADS,EACTA,WAAYH,EADH,EACGA,YAC1BkR,EAAaH,aAAc/Q,EAAaS,EAAIJ,WAAaQ,IAAYC,KAAOV,EAAaD,GAC/F0c,EAAY,CAAEvd,GAAImB,EAAIY,MAAM/B,GAAIiS,SAAQL,cAE1C,MAAO,CACLgK,IAAK,CACHvZ,OAAQsa,EAAQf,IAAIvZ,OAAS,EAC7BhB,OAAQsb,EAAQf,IAAIva,OAASF,EAAIE,OACjC4Q,OAAQ0K,EAAQf,IAAI3J,OAASA,EAC7BsL,aAEFhB,QAAS,CACPla,OAAQsa,EAAQJ,QAAQla,OAAS,EACjChB,OAAQsb,EAAQJ,QAAQlb,OAASF,EAAIE,QAEvCsa,KAAMgB,EAAQhB,MAGlB,OAAI7C,IAAgBxZ,EAAOwD,KAClB,CACL6Y,KAAM,CACJtZ,OAAQsa,EAAQhB,KAAKtZ,OAAS,EAC9BhB,OAAQsb,EAAQhB,KAAKta,OAASF,EAAIE,QAEpCkb,QAAS,CACPla,OAAQsa,EAAQJ,QAAQla,OAAS,EACjChB,OAAQsb,EAAQJ,QAAQlb,OAASF,EAAIE,QAEvCua,IAAKe,EAAQf,KAIVe,IACNW,KAwGUK,GArGuB,SAAC,GAA6B,IAA3B9C,EAA0B,EAA1BA,cAAe7Z,EAAW,EAAXA,KAC9CwK,EAAMC,eAAND,EACA1F,EAAYkE,cAAZlE,QACFrD,EAAeoW,cACflG,EAAeC,cAEf+J,EAAUa,GAAcxc,EAAMyB,GAC9Bmb,EAAkBjB,EAAQf,IAAI3J,OAAS0K,EAAQhB,KAAKta,OACpDwc,EAAsBD,EAAkB,EACxCE,EAAqBnB,EAAQJ,QAAQlb,OAASsb,EAAQJ,QAAQla,OAC9D0b,EAAoBH,EAAkBjB,EAAQJ,QAAQla,OACtD2b,EAAsBD,EAAoB,EAG1CE,EAAgD,IAAjCtB,EAAQf,IAAI2B,UAAUtL,OAE3C,OAAO4I,EACL,gBAAC,IAAD,CAAK9H,EAAE,OAAP,UACE,eAAC,KAAD,CAAM8C,MAAI,EAACzC,SAAS,OAAOtG,MAAM,YAAYoR,GAAG,OAAhD,SACG1S,EAAE,kBAEL,gBAAC,IAAD,WACE,eAAC,GAAD,CAAUmQ,KAAMgB,EAAQhB,KAAKtZ,OAAQuZ,IAAKe,EAAQf,IAAIvZ,SACtD,gBAAC,IAAD,CAAM6a,cAAc,SAAShK,eAAe,SAASiL,GAAG,OAAxD,UACE,eAAC,KAAD,CAAMtI,MAAI,EAAC/I,MAAM,aAAjB,SACGtB,EAAE,iBAEL,eAAC,KAAD,CAAMqK,MAAI,EAACzC,SAAS,OAAO6C,WAAW,IAAInJ,MAAO+Q,EAAsB,UAAY,UAAnF,mBACMA,EAAsB,IAAM,IADlC,OACuClN,aAAUiN,GADjD,UAGA,eAAC,KAAD,CAAMvB,OAAK,EAACvP,MAAM,aAAlB,qBACQ6D,aAAUgC,EAAaU,MAAMuK,GAAiBtK,qBAI1D,gBAAC,IAAD,CAAK6K,GAAG,MAAR,UACE,eAAC,KAAD,CAAMrL,GAAG,OAAO+C,MAAI,EAAC/I,MAAM,aAA3B,SACGtB,EAAE,4BAEL,eAAC,KAAD,CAAMqK,MAAI,EAAC/I,MAAOkR,EAAsB,UAAY,UAApD,mBACMA,EAAsB,IAAM,IADlC,OACuCrN,aAAUoN,GADjD,UAGA,eAAC,KAAD,CAAM1B,OAAK,EAACvP,MAAM,aAAlB,qBACQ6D,aAAUgC,EAAaU,MAAM0K,GAAmBzK,eAGvD2K,GACC,uCACE,eAAC,KAAD,CAAMnL,GAAG,OAAO+C,MAAI,EAAC/I,MAAM,aAA3B,SACGtB,EAAE,yBAA0B,CAAExF,QAAS2W,EAAQf,IAAI2B,UAAUvd,OAEhE,gBAAC,IAAD,CAAMiT,WAAW,WAAjB,UACE,eAAC,KAAD,CAAM4C,MAAI,EAAC/I,MAAM,UAAjB,oBAAgC6D,aAAUgM,EAAQf,IAAI2B,UAAUtL,QAAhE,UACA,gBAAC,KAAD,CAAMoD,GAAG,MAAMgH,OAAK,EAACvP,MAAM,aAA3B,cACI6P,EAAQf,IAAI2B,UAAU3L,WAAWkK,QAAQ,GAD7C,WAIF,eAAC,KAAD,CAAMO,OAAK,EAACvP,MAAM,aAAlB,qBACQ6D,aAAUgC,EAAaU,MAAMsJ,EAAQf,IAAI2B,UAAUtL,QAAQqB,kBAKvE,eAAC,KAAD,CAAMR,GAAG,OAAO+C,MAAI,EAAC/I,MAAM,aAA3B,SACGtB,EAAE,sCAEL,eAAC,KAAD,CAAMqK,MAAI,EAAV,mBAAelF,aAAUmN,GAAzB,UACA,eAAC,KAAD,CAAMzB,OAAK,EAACvP,MAAM,aAAlB,qBACQ6D,aAAUgC,EAAaU,MAAMyK,GAAoBxK,eAGzD,eAAC8J,GAAD,IAEA,eAAC,GAAD,CAAYV,KAAK,MAAMC,QAASA,EAAShK,aAAcA,IACvD,eAAC,GAAD,CAAY+J,KAAK,OAAOC,QAASA,EAAShK,aAAcA,IACxD,eAAC,GAAD,CAAY+J,KAAK,UAAUC,QAASA,EAAShK,aAAcA,IAE3D,eAAC,IAAD,CAAMO,eAAe,SAASJ,GAAG,OAAjC,SACE,eAAC,KAAD,CAAMe,KAAI,UAAKuK,aAAqBtY,GAA1B,eAAiDiK,GAAG,OAAOyI,UAAQ,EAA7E,SACE,gBAAC,IAAD,CAAQ1F,GAAG,MAAMtG,MAAM,OAAvB,UACGhB,EAAE,wBACH,eAAC,KAAD,CAAasB,MAAM,QAAQuI,GAAG,qBAOxC,gBAAC,IAAD,CAAKtC,EAAE,OAAP,UACE,eAAC,IAAD,CAASuH,KAAK,KAAKnH,UAAU,SAASpD,GAAG,MAAzC,SACGvE,EAAE,qCAEL,eAAC,KAAD,CAAMyE,GAAG,IAAIkD,UAAU,SAAvB,SACG3H,EACC,2HCrLJ6S,GAAgBjU,KAAOC,IAAV,sHACG,qBAAGC,MAAkBsM,KAAKC,cAM1CyH,GAAalU,KAAOC,IAAV,uGAOVkU,GAAiBnU,KAAOC,IAAV,6MAEE,qBAAGC,MAAkBsM,KAAKC,cAsEjC2H,GA5DC,WAAO,IACb1Y,EAAYkE,cAAZlE,QACF4D,EAAWC,cACX1E,EAAoB6G,cACpB3G,EAAoB8U,cACpB7U,EAAgB4U,cAChBvX,EAAeoW,cACbrN,EAAMC,eAAND,EACFxK,EAAOyd,YAAuB3Y,GARhB,EASc4C,mBAASnJ,EAAYkb,QATnC,mBASbX,EATa,KASFC,EATE,KAWpB5Q,qBAAU,WACJrD,GAAWb,GACbyE,EAASpD,GAAa,CAAER,eAEzB,CAACA,EAASrD,EAAcwC,EAAmByE,IAI9C,IAAMgV,EAAUtZ,IAAkBC,IAAcuU,Y9B4GX,SAAC5Y,GACtC,OAAOA,EAAKoH,OAAOrF,I8B7G2C4b,CAAwB3d,GAAQA,EAExF6Z,EAAgB6D,GAAWA,EAAQxY,OAAS,EAE9C0Y,EAAqB,KAEzB,OAAQ9E,GACN,KAAKva,EAAYsf,IACfD,EAAqB,eAAC,GAAD,CAAQ/D,cAAeA,EAAe7Z,KAAM0d,IACjE,MACF,KAAKnf,EAAYkb,OACjB,QACEmE,EAAqB,eAAC,GAAD,CAAW/D,cAAeA,EAAe7Z,KAAM0d,IAaxE,OATK5Y,IACH8Y,EACE,gBAAC,IAAD,CAAM1L,eAAe,SAASD,WAAW,SAASiK,cAAc,SAASpK,GAAG,OAA5E,UACE,eAACgM,GAAA,EAAD,IACA,eAAC,KAAD,CAAMhM,GAAG,MAAT,SAAgBtH,EAAE,6DAMtB,gBAAC6S,GAAD,WACE,eAAC,GAAD,CAAQvE,UAAWA,EAAWC,aAAcA,IAC5C,eAACuE,GAAD,UACGnZ,EACC,eAACoZ,GAAD,UACE,eAAC,KAAD,CAASjE,KAAM,OAGjBsE,Q,uDC5FGG,I,OAAsD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAa3K,EAAY,6BAEvF4K,EADQ7P,eACK7E,OAAOyU,EAAW,UAAY,YAEjD,OACE,gBAAC,KAAD,yBAAKxQ,OAAO,OAAOhC,MAAM,QAAQyP,QAAQ,cAAiB5H,GAA1D,cACE,oBAAGjM,OAAO,kBAAV,SACE,uBACE8W,EAAE,yNACFD,KAAMA,MAGV,gCACE,0BACEjf,GAAG,YACHmf,EAAE,UACFC,EAAE,IACF5S,MAAM,MACNgC,OAAO,UACP6Q,YAAY,iBACZC,0BAA0B,OAP5B,UASE,0BAASC,aAAa,IAAI5L,OAAO,uBACjC,0BAAS6L,KAAK,SAASrT,GAAG,gBAAgBsT,IAAI,qBAAqB9L,OAAO,UAC1E,gCACExH,GAAG,cACHuQ,KAAK,SACLgD,OAAO,4CACP/L,OAAO,cAET,8BACA,iCAAgBgM,aAAa,MAC7B,8BAAaF,IAAI,YAAYG,SAAS,aAAaC,GAAG,KAAKC,GAAG,MAC9D,gCAAepD,KAAK,SAASgD,OAAO,+CACpC,0BAASF,KAAK,SAASC,IAAI,QAAQ9L,OAAO,mCAOvCoM,GAAoD,SAAC,GAA4B,IAA1Bf,EAAyB,EAAzBA,SAAa3K,EAAY,6BAErF4K,EADQ7P,eACK7E,OAAOyU,EAAW,UAAY,YAEjD,OACE,gBAAC,KAAD,yBAAKxQ,OAAO,OAAOhC,MAAM,QAAQyP,QAAQ,cAAiB5H,GAA1D,cACE,oBAAGjM,OAAO,kBAAV,SACE,uBACE8W,EAAE,4NACFD,KAAMA,MAGV,gCACE,0BACEjf,GAAG,YACHmf,EAAE,UACFC,EAAE,UACF5S,MAAM,MACNgC,OAAO,UACP6Q,YAAY,iBACZC,0BAA0B,OAP5B,UASE,0BAASC,aAAa,IAAI5L,OAAO,uBACjC,0BAAS6L,KAAK,SAASrT,GAAG,gBAAgBsT,IAAI,qBAAqB9L,OAAO,UAC1E,gCACExH,GAAG,cACHuQ,KAAK,SACLgD,OAAO,4CACP/L,OAAO,cAET,8BACA,iCAAgBgM,aAAa,MAC7B,8BAAaF,IAAI,YAAYG,SAAS,aAAaC,GAAG,KAAKC,GAAG,MAC9D,gCAAepD,KAAK,SAASgD,OAAO,+CACpC,0BAASF,KAAK,SAASC,IAAI,QAAQ9L,OAAO,kCCzE9CqM,GAAmB5V,aAAOyK,MAAK6D,MAAM,CACzC7L,QAAS,YACTiI,UAAW,eAAC,IAAD,CAAqBtI,MAAM,UAFfpC,CAAH,kFAyBP6V,GAjB+B,SAAC,GAAgB,IAAd5e,EAAa,EAAbA,OACvCmK,EAAMC,eAAND,EADoD,EAEb0U,aAC7C,sBAAKzT,MAAO,CAAE0T,WAAY,UAA1B,mBAA0CxP,GAAUtP,GAApD,UACA,CAAE+e,UAAW,WAFPC,EAFoD,EAEpDA,UAAWC,EAFyC,EAEzCA,eAAgBC,EAFyB,EAEzBA,QAKnC,OACE,uCACE,wBAAM7U,IAAK2U,EAAX,UACE,eAACL,GAAD,UAAmBxU,EAAE,aAA+B,OAC9C,IACP8U,GAAkBC,MCbnBC,GAAepW,KAAOC,IAAV,mFAMZoW,GAAUrW,KAAOC,IAAV,8MAYPqW,GAAoBtW,KAAOC,IAAV,qEAKjBsW,GACJ,eAACC,EAAD,uDAAY,aAAZ,OACA,SAAC5B,EAAmB6B,GAClB,OAAIA,EACK,eAGL7B,EACK,QAGF4B,IAyEIE,GAtEyC,SAAC,GAOlD,IANLC,EAMI,EANJA,UACAnP,EAKI,EALJA,WAKI,IAJJ2E,kBAII,aAHJhB,mBAGI,MAHUhU,IAAYC,KAGtB,MAFJqf,kBAEI,aADJ7B,gBACI,SACIxT,EAAMC,eAAND,EACFwV,EAAUL,GAAa,UAAbA,CAAwB3B,EAAU6B,GAC5CI,EAAYN,GAAa,UAAbA,CAAwB3B,EAAU6B,GAC9CK,EAAYP,KAAe3B,EAAU6B,GACrCM,EACJ,eAAC,IAAD,UACE,gBAAC,IAAD,CAAMjO,eAAe,SAAS1E,OAAO,OAArC,UACE,eAAC,KAAD,CAAM4E,SAAS,OAAOtG,MAAOoU,EAAWrL,MAAI,EAACI,WAAW,MAAxD,cACkBhJ,IAAf2E,EAAA,UAA8BA,EAAWf,oBAAe5D,EAAW,CAAE8D,sBAAuB,IAA5F,KAAsG,MAEzG,eAAC,KAAD,CAAMqC,SAAS,OAAOtG,MAAOoU,EAAWjL,WAAW,MAAMZ,GAAG,MAA5D,SACG7J,EAAE,iBAML4V,EAAgB,SAACrgB,GACrB,OAAKwV,EAKH,eAACmK,GAAD,CAAmBjU,MAAO1L,EAA1B,SACE,eAAC,GAAD,CAAYM,OAAQ0f,MALf,MAUX,OAAIxL,IAAgBhU,IAAYE,KAE5B,eAAC,IAAD,CAAKV,SAAS,WAAd,SACE,gBAACyf,GAAD,WACE,eAAC,GAAD,CAA0BxB,SAAUA,IACnCoC,EAAc,CAAEC,OAAQ,EAAGC,MAAO,IACnC,gBAACb,GAAD,YACII,GAAcM,EAChB,eAAC,KAAD,CAAMtL,MAAI,EAACzC,SAAS,OAAOrD,GAAG,MAAMjD,MAAOmU,EAAW7L,cAAc,YAApE,SACG5J,EAAE,kBASb,eAAC,IAAD,CAAKzK,SAAS,WAAd,SACE,gBAACyf,GAAD,WACE,eAAC,GAAD,CAAwBxB,SAAUA,IACjCoC,EAAc,CAAEG,IAAK,EAAGC,KAAM,IAC/B,gBAACf,GAAD,WACE,eAAC,KAAD,CAAM5K,MAAI,EAACzC,SAAS,OAAO6C,WAAW,OAAOnJ,MAAOkU,EAAS5L,cAAc,YAA3E,SACG5J,EAAE,SAEHqV,GAAcM,WC9GXM,GAJFrX,aAAOsX,IAAPtX,CAAH,sDC+BJuX,GAAuB,SAAC9d,EAAgB+c,GAC5C,OAAQ/c,GACN,IAAK,UACH,MAAO,eACT,IAAK,OACH,MAAO,QACT,IAAK,OACH,MAAO,YACT,IAAK,WACL,IAAK,cACH,MAAO,OACT,QACE,OAAO+c,IAIPgB,GAAmBxX,KAAOC,IAAV,iLAEN,mBAtCW,SAACC,EAAqBzG,GAC/C,OAAQA,GACN,IAAK,cACH,OAAOyG,EAAMC,OAAOC,UAAUqX,WAChC,IAAK,OACH,MAAO,cACT,IAAK,WACH,OAAOvX,EAAMC,OAAOuX,QACtB,IAAK,OACH,OAAOxX,EAAMC,OAAOa,UACtB,IAAK,UACL,IAAK,OACL,QACE,OAAOd,EAAMC,OAAOmM,YAyBaqL,CAAvB,EAAGzX,MAAH,EAAUzG,WAIb,kBAA4B,SAA5B,EAAGA,OAAkC,OAAS,SAGrDme,GAAQ5X,KAAOC,IAAV,uDAyBI4X,GArB+B,SAAC,GAAoC,IAAlCpe,EAAiC,EAAjCA,OAAQ+L,EAAyB,EAAzBA,MAAO9P,EAAkB,EAAlBA,MAAOiV,EAAW,EAAXA,KAC/DmM,EAAYS,GAAqB9d,EAAQ,QACzCyS,EAAoB,SAAXzS,EAEf,OACE,gBAAC+d,GAAD,CAAkB/d,OAAQA,EAA1B,UACE,gBAAC,IAAD,CAAMoP,WAAW,SAAjB,UACG8B,EACD,eAAC,KAAD,CAAMjI,MAAOoU,EAAWrL,KAAMS,EAAQlB,cAAekB,EAAS,YAAc,aAAcL,WAAW,OAArG,SACGrG,OAGL,eAACoS,GAAD,UACE,eAAC,KAAD,CAAM5O,SAAUkD,EAAS,OAAS,OAAQxJ,MAAO6U,GAAqB9d,EAAQ,cAAesP,UAAU,SAAvG,oBACOrT,WC9DTkL,GAAUZ,aAAOuK,IAAPvK,CAAH,oIACS,qBAAGE,MAAkBC,OAAOa,aAM9C,YACA,OADkB,EAAf8W,SACY,oHAoCJC,GAzBuD,SAAC,GAMhE,IALLnc,EAKI,EALJA,QACAlG,EAII,EAJJA,MACAmS,EAGI,EAHJA,OAGI,IAFJiQ,gBAEI,SADD7N,EACC,wDACIvO,EAAYkE,cAAZlE,QACA0F,EAAMC,eAAND,EAGR,OAFiBoM,YAAe9R,EAASE,GAOvC,gBAAC,GAAD,yBAASiN,WAAW,SAASF,EAAE,OAAOmP,SAAUA,GAAc7N,GAA9D,cACE,eAAC,KAAD,CAAgB7H,MAAM,OAAOC,MAAO,CAAEC,KAAM,QAAUC,GAAG,QACzD,eAAC,GAAD,CAAuBsF,OAAQA,EAAQjM,QAASA,EAASlG,MAAOA,EAAOsU,YAAY,EAAO5H,MAAM,OAAhG,SACGhB,EAAE,0BAPA,MCSI4W,GAvC6C,SAAC,GAAe,IAAbrgB,EAAY,EAAZA,MACrDyJ,EAAMC,eAAND,EACFkD,EAAW2T,cAFwD,EAG/BnL,GAAgBnV,EAAMjC,OAAxDqX,EAHiE,EAGjEA,aAAcC,EAHmD,EAGnDA,gBACdtX,EAAsBiC,EAAtBjC,MACFwiB,EADwBvgB,EAAfhC,WACwB2O,EAEjCoJ,EAAa,uCAAG,sBAAA7U,EAAA,sDACpBmU,GAAgB,GADI,2CAAH,qDAInB,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,CACEvT,OAAO,WACPkR,KAAM,eAAC,IAAD,CAAWpI,GAAG,MAAMH,MAAM,SAChCoD,MAAOpE,EAAE,YACT1L,MAAOiC,EAAMjC,MACbyiB,YAAaD,IAEf,gBAAC,IAAD,CAAUvP,EAAE,OAAZ,UACE,eAAC,GAAD,CAAiB8N,YAAU,IAC3B,eAAC,GAAD,UACE,gBAAC,IAAD,CAAM3D,cAAc,SAASjK,WAAW,SAAxC,UACE,eAAC,KAAD,CAAM4C,MAAI,EAAC/I,MAAOqK,EAAe,OAAS,eAA1C,SACG3L,EAAE,oBAEJ2L,GAAgB,eAAC,GAAD,CAAuBrX,MAAOA,EAAOqS,UAAW2F,EAAetL,MAAM,OAAOgW,GAAG,QAChG,eAAC,KAAD,CAAc3O,KAAK,uDAAuD2E,UAAQ,EAAlF,SACGhN,EAAE,qBAIT,eAAC,GAAD,CAAiB+J,YAAahU,IAAYE,KAAMof,YAAU,WCzB5D4B,GAAyBrY,aAAOqX,GAAPrX,CAAH,kHA4DbsY,GAnD2C,SAAC,GAOpD,IANL3gB,EAMI,EANJA,MACAgf,EAKI,EALJA,UACA4B,EAII,EAJJA,aACAC,EAGI,EAHJA,eACAvK,EAEI,EAFJA,eACAC,EACI,EADJA,eAEQ9M,EAAMC,eAAND,EACA1F,EAAYkE,cAAZlE,QACA9F,EAA+C+B,EAA/C/B,GAAIF,EAA2CiC,EAA3CjC,MAAOS,EAAoCwB,EAApCxB,SAAUD,EAA0ByB,EAA1BzB,UACvBiV,EADiDxT,EAAfvB,WACPF,EAAYiB,IAAYC,KAAOD,IAAYE,KACtEN,EAAM0hB,YAAmB/c,EAAS/D,EAAM/B,IACxCiS,EAASN,GAAUxQ,GAEzB,OAAIY,EAAM7B,OACD,eAAC,GAAD,CAAmB6B,MAAOA,IAIjC,gBAAC,IAAD,CAAKhB,SAAS,WAAd,UACE,gBAAC0hB,GAAD,WACE,eAAC,GAAD,CACE5e,OAAO,UACPkR,KAAM,eAAC,IAAD,CAAWpI,GAAG,MAAMH,MAAM,OAAOM,MAAM,iBAC7C8C,MAAOpE,EAAE,WACT+W,YAAahiB,EACbT,MAAOiC,EAAMjC,QAEf,gBAAC,IAAD,CAAUiT,EAAE,OAAOtG,MAAO,CAAE1L,SAAU,YAAtC,UACE,eAAC,GAAD,CACEggB,UAAWA,EACXnP,WAAYyG,EACZ2G,SAAUzJ,IAAgBhU,IAAYC,KACtC+U,WAAYoM,IAEd,eAAC,GAAD,CAAa5gB,MAAOA,IACpB,eAAC,GAAD,CACEgf,UAAWA,EACXnP,WAAY0G,EACZ/C,YAAahU,IAAYE,KACzBud,SAAUzJ,IAAgBhU,IAAYE,KACtC8U,WAAYqM,UAIlB,eAAC,GAAD,CAAwB5c,QAAShG,EAAIF,MAAOA,EAAOmS,OAAQA,EAAQiQ,SAAUU,Q,oBC3BpEE,GAtCyC,SAAC,GAAe,IAAb/gB,EAAY,EAAZA,MACjDyJ,EAAMC,eAAND,EACFkD,EAAW2T,cACXC,EAAoBvgB,EAAMhC,WAAa2O,EAHwB,EAItBwR,aAC7C1U,EAAE,6GACF,CAAE4U,UAAW,WAFPC,EAJ6D,EAI7DA,UAAWE,EAJkD,EAIlDA,QAASD,EAJyC,EAIzCA,eAK5B,OACE,uCACE,gBAAC,GAAD,WACE,eAAC,GAAD,CACEzc,OAAO,cACPkR,KAAM,eAAC,KAAD,CAAUpI,GAAG,MAAMH,MAAM,SAC/BoD,MAAOpE,EAAE,eACT1L,MAAOiC,EAAMjC,MACbyiB,YAAaD,IAEf,gBAAC,IAAD,CAAUvP,EAAE,OAAZ,UACE,eAAC,GAAD,CAAiB8N,YAAU,IAC3B,eAAC,GAAD,UACE,gBAAC,IAAD,CAAM5N,WAAW,SAASC,eAAe,SAASgK,cAAc,SAAhE,UACE,eAAC,KAAD,CAAS5C,KAAM,KACf,gBAAC,IAAD,CAAMxH,GAAG,MAAMpH,IAAK2U,EAApB,UACE,eAAC,KAAD,UAAc7U,EAAE,iBAChB,eAAC,IAAD,CAAU6J,GAAG,gBAInB,eAAC,GAAD,CAAiBE,YAAahU,IAAYE,KAAMof,YAAU,UAG7DP,GAAkBC,MCrBnBwC,GAAiB3Y,KAAOC,IAAV,yIAMd2Y,GAAe5Y,aAAOqX,GAAPrX,CAAH,kDACF,gBAAGE,EAAH,EAAGA,MAAH,OAAeuH,GAAuBvH,MA2FvC2Y,GAxFqC,SAAC,GAO9C,IANLlhB,EAMI,EANJA,MACAgf,EAKI,EALJA,UACA4B,EAII,EAJJA,aACAC,EAGI,EAHJA,eACAvK,EAEI,EAFJA,eACAC,EACI,EADJA,eAEQ9M,EAAMC,eAAND,EACAlL,EAAsCyB,EAAtCzB,UAAWD,EAA2B0B,EAA3B1B,UAAWK,EAAgBqB,EAAhBrB,YACtBwiB,EAAiBC,cAAjBD,aACFE,EAAgBC,cAChB1a,EAAQ2a,cACRC,EAAS5a,EAAM6a,GAAGljB,GAClBmjB,EAAaF,EAAS,UAAY,UAClCjB,EAAoBjiB,EAAY+iB,EAChCnM,EAAkBtO,EAAM+a,MAAMpjB,GAAWgT,WAT3C,EAUwBqQ,sBAAW,CACrCC,MAAO,EACPC,IAAKlb,EAAM2K,WACXwQ,SAAU,EACVC,SAAU,IAJJC,EAVJ,EAUIA,QAASC,EAVb,EAUaA,OAVb,EAgB2C/D,aAAW1U,EAAE,oCAAqC,CAC/F4U,UAAW,WADLC,EAhBJ,EAgBIA,UAAWE,EAhBf,EAgBeA,QAASD,EAhBxB,EAgBwBA,eAQ5B,OAJAnX,qBAAU,WACR8a,EAAOtb,EAAM2K,cACZ,CAAC3K,EAAOsb,IAEPliB,EAAM7B,OACD,eAAC,GAAD,CAAmB6B,MAAOA,IAG/BmhB,EAAeZ,EACV,eAAC,GAAD,CAAiBvgB,MAAOA,IAI/B,gBAACghB,GAAD,WACE,gBAACC,GAAD,WACE,eAAC,GAAD,CACEnf,OAAO,OACPkR,KAAM,eAAC,KAAD,CAAuBpI,GAAG,MAAMH,MAAM,OAAOM,MAAM,cACzD8C,MAAOpE,EAAE,QACT1L,MAAOiC,EAAMjC,MACbyiB,YAAaD,IAEf,eAAC4B,GAAA,EAAD,CAAerX,QAAQ,OAAOwM,MAAM,KAAKtZ,WAAYM,EAAWE,SAAU+hB,IAC1E,gBAAC,IAAD,CAAUvP,EAAE,OAAZ,UACE,eAAC,GAAD,CACEgO,UAAWA,EACXnP,WAAYyG,EACZ9B,WAAYoM,EACZ3D,SAAUuE,IAEZ,gBAAC,GAAD,CAAgBhO,YAAagO,EAAShiB,IAAYC,KAAOD,IAAYE,KAArE,UACE,eAAC,KAAD,CAAMqL,MAAM,aAAasG,SAAS,OAAOyC,MAAI,EAACT,cAAc,YAAYrF,GAAG,MAA3E,SACGvE,EAAE,gBAEL,gBAAC,IAAD,CAAMyH,WAAW,SAASC,eAAe,gBAAgBnD,GAAG,OAAOvB,OAAO,OAA1E,UACE,sBAAK9C,IAAK2U,EAAV,SACE,eAAC,KAAD,CAAaxK,MAAI,EAAC/I,MAAO2W,EAAYrQ,SAAS,OAAO3G,MAAO,CAAE0X,UAAW,QAAzE,SACGxb,EAAM6a,GAAG,GAAT,WAAkBQ,GAAY,eAAC,KAAD,CAAUxV,OAAO,OAAOhC,MAAM,aAGjE,eAAC,GAAD,CAAa+I,YAAagO,EAAShiB,IAAYC,KAAOD,IAAYE,KAAlE,SACG+O,GAAUyG,QAGd3W,GAAa,eAAC,GAAD,CAAcA,UAAWA,IACvC,eAAC,GAAD,CAAcI,YAAaA,OAE7B,eAAC,GAAD,CACEqgB,UAAWA,EACXnP,WAAY0G,EACZ/C,YAAahU,IAAYE,KACzB8U,WAAYqM,EACZ5D,UAAWuE,UAIhBjD,GAAkBC,MC9GnB6D,GAAQha,KAAOC,IAAV,uPAgBLga,GAAOja,aAAOga,GAAPha,CAAH,6DAIJka,GAAQla,KAAOC,IAAV,4OAGY,qBAAGka,UAA6B,IAAM,IAIzDH,IACW,qBAAGG,UAA6B,EAAI,KAG/CF,IACW,qBAAGE,UAA6B,GAAK,KAI9CC,GAAiBpa,KAAOC,IAAV,wEA0BLoa,GAb2B,SAAC,GAAqC,IAAnCF,EAAkC,EAAlCA,UAAW/V,EAAuB,EAAvBA,OAAuB,EARzD,SAACrB,GACrB,GAAwB,IAApBA,EAASjH,OACX,MAAM,IAAIwe,MAAM,uCAGlB,OAAOvX,EAIewX,CADuD,EAAfxX,UAAe,mBACtEyX,EADsE,KAC/DC,EAD+D,KAG7E,OACE,eAACL,GAAD,CAAgB/X,MAAO,CAAE+B,UAAzB,SACE,gBAAC8V,GAAD,CAAOC,UAAWA,EAAlB,UACE,eAACH,GAAD,UAAQQ,IACR,eAACP,GAAD,UAAOQ,U,mBCpDAC,GAVG,WAChB,IAAMC,EAAgBC,qBAAWjY,IAEjC,QAAsBE,IAAlB8X,EACF,MAAM,IAAIL,MAAM,oBAGlB,OAAOK,GCHME,GAJC7a,aAAOuK,KAAM+D,MAAM,CAAEzF,WAAY,UAAjC7I,CAAH,0CCgCP8a,G,KAASC,EAAOC,KAAKxjB,QAAQ,IAY7ByjB,GAAW,IAAI/b,KAAU,GAAG+J,MAAMiS,KAAQC,IAAIC,OAAWvlB,WAEzDwlB,GAAO,IAAInc,KAAU,KAAM+J,MAAMqS,MACjCC,GAAmB,CAAC,GAAI,GAAI,GAAI,IA4NvBC,GA/LyC,SAAC,GAAqD,IA3BnFC,EA2BgC9kB,EAAkD,EAAlDA,SAAU+kB,EAAwC,EAAxCA,eAAgBC,EAAwB,EAAxBA,OAAQ5T,EAAgB,EAAhBA,UAAgB,EACjFzJ,mBAAS,IADwE,mBACpGjJ,EADoG,KAC7FumB,EAD6F,OAErEtd,oBAAS,GAF4D,mBAEpGud,EAFoG,KAEvFC,EAFuF,OAGnExd,mBAAS,MAH0D,mBAGpGyd,EAHoG,KAGtFC,EAHsF,KAInGtgB,EAAYkE,cAAZlE,QACAsH,EAAW0X,KAAX1X,OACFiZ,EAAeC,aAAgBpB,IAC/B3hB,EAAegjB,cACb/a,EAAMC,eAAND,EACAgH,EAAeF,eAAfE,WACFC,EAAsB+T,eAEtBC,EAAiBpW,GAAegW,GAAc/S,WAC9CoT,EAAarW,GAAegW,EAAa7C,GAAGiC,IAAQY,EAAa3C,MAAM+B,IAAQY,GAAc/S,WAC7FqT,EAAY,IAAIrd,KAAU7J,GAE1BmnB,EAAyBD,EAAUtc,IAAIqc,GAAYrT,MAAM,KAAKC,WAC9DuT,GA5CmBhB,EA4CmBe,EA3CxCjnB,OAAOC,MAAMimB,IAIbA,EAAa,KAIbA,EAAa,EAPR,GAWH,GAAN,OAAUA,EAAWhV,oBAAe5D,EAAW,CAAE8D,sBAAuB,IAAxE,MAgCM+V,EAAmBhhB,GAAW6gB,EAAUnD,GAAG,IAAuB,OAAjB2C,EACjDY,EAAsB1W,GAAe9M,GAAc+P,WAnBkD,EAXtF,SAAC7T,EAAkB4mB,EAAyBU,GACjE,OAAIV,EAAaW,GAAG,GACX,CAAEC,IAAK,2BAA4BzS,UAAU,GAGlD/U,EAAMunB,GAAG,IAAMvnB,EAAMG,QAChB,CAAEqnB,IAAK,kBAAmBzS,UAAU,GAEtC,CAAEyS,IAAK,UAAWzS,SAAU/U,EAAMynB,GAAGH,IAuDlBI,CAAeR,EAAWN,EAAcU,GAA1DE,EApDmG,EAoDnGA,IAAKzS,EApD8F,EAoD9FA,SAyCb,OAhBArL,qBAAU,WACR,IAAMie,EAAU,IAAI9d,KAAU7J,GACD2nB,EAAQ5D,GAAG,IAAM4D,EAAQC,IAAIX,GAI/CU,EAAQ5D,GAAG,IAAM4D,EAAQF,GAAGH,GACrCX,EAAgB,CACda,IAAK,gDACLK,KAAM,CAAErW,IAAK8V,EAAqBQ,MAAO,YAG3CnB,EAAgB,MAPhBA,EAAgB,CAAEa,IAAK,kCASxB,CAACxnB,EAAOinB,EAAYK,EAAqBX,IAG1C,gBAAC,GAAD,CAAMoB,YAtDgB,WACtBpa,EAAOqa,SAASC,UAChBta,EAAOua,WAAWD,UAClBta,EAAOwa,gBAmD6BC,WAhDf,WACrBza,EAAOqa,SAASK,SAChB1a,EAAOua,WAAWG,SAClB1a,EAAO2a,gBA6CP,UACE,eAAC,IAAD,CAAYhV,EAAE,OAAd,SACE,gBAAC,IAAD,CAAME,WAAW,SAAjB,UACE,eAAC,IAAD,CAAYpG,QAAQ,OAAOwM,MAAM,KAAKzM,QA/DzB,WACnBoZ,EAAS,IACTD,KA6DmEpZ,GAAG,MAAhE,SACE,eAAC,IAAD,CAAeH,MAAM,WAEvB,eAAC,GAAD,UACE,eAAC,IAAD,CAAS6M,MAAM,KAAf,SAAqB7N,EAAE,oBAEzB,eAAC,GAAD,CAAa+J,YAAaxU,EAAU6L,QAASkZ,EAA7C,SACG/kB,IAAaQ,IAAYC,KAAOgK,EAAE,MAAQA,EAAE,eAInD,gBAAC,IAAD,CAAUyJ,GAAG,OAAb,UACE,gBAAC,IAAD,CAAMhC,WAAW,SAASC,eAAe,gBAAgBnD,GAAG,MAA5D,UACE,gBAAC,KAAD,CAAMoD,UAAU,QAAQrG,MAAM,aAA9B,UACGtB,EAAE,UADL,OAGA,gBAAC,IAAD,CAAMyH,WAAW,SAAjB,UACE,eAAC,IAAD,CAAYtG,GAAG,UACf,eAAC,KAAD,CAAMkJ,MAAI,EAACT,cAAc,YAAzB,0BAKJ,eAAC,IAAD,CACE3V,MAAOA,EACPuoB,YArGa,SAACC,GACpBjC,EAASiC,IAqGHC,UAAWpB,EACXqB,WAAY,CAAE3T,UAAW1O,GAAWmgB,KAErCa,GACC,eAAC,KAAD,CAAMha,MAAM,UAAUsG,SAAS,OAAON,GAAG,MAAMK,UAAU,QAAzD,SACG3H,EAAE2a,EAAac,IAAKd,EAAamB,QAGtC,eAAC,KAAD,CAAMnU,UAAU,QAAQpD,GAAG,OAAOjD,MAAM,aAAasG,SAAS,OAAO3G,MAAO,CAAE+B,OAAQ,QAAtF,SACG1I,GAAW0F,EAAE,qBAAsB,CAAE4c,QAAS3B,MAEjD,eAAC,KAAD,CACEhgB,KAAK,UACL4hB,IAAK,EACLC,IAAK5B,EACLjnB,MAAOknB,EAAUU,IAAIX,GAAcC,EAAUrT,WAAa,EAC1DiV,eAlHmB,SAACC,GAC1BxC,EAASwC,EAASvoB,aAkHZwoB,KAAM,MACNC,WAAY5iB,EAAU+gB,EAAoB,GAC1CrS,UAAW1O,GAAWmgB,EACtBlW,GAAG,QAEL,gBAAC,IAAD,CAAMkD,WAAW,SAASC,eAAe,gBAAgBnD,GAAG,OAA5D,UACG4V,GAAiBxjB,KAAI,SAACwmB,GAKrB,OACE,eAAC,IAAD,CAEEtP,MAAM,KACNxM,QAAQ,WACRD,QATgB,WAClBoZ,GAAW2C,EAAU,IAAOjC,GAAYzmB,aAStCuU,UAAW1O,GAAWmgB,EACtBxZ,MAAO,CAAEC,KAAM,GANjB,mBAQMic,EARN,MACOA,MAWX,eAAC,IAAD,CAAQtP,MAAM,KAAKxM,QAAQ,WAAWD,QAvI/B,WACboZ,EAASU,EAAWzmB,aAsIyCuU,UAAW1O,GAAWmgB,EAA7E,SACGza,EAAE,YAGP,eAAC,IAAD,CAAKuE,GAAG,MAAR,SACGjK,EACC,eAAC,IAAD,CACE0G,MAAM,OACNgI,UAAW1O,GAAW0O,EACtB5H,QAvHgB,WAC1B,IAAMgc,EAAY7nB,IAAaQ,IAAYC,KAAO,UAAY,UACxDqnB,EAAeC,aAAiBnC,GAEtClU,EAAoBtP,QAAQylB,KACzBpV,KAAK,CAAEC,KAAM3N,EAASrG,MAAOopB,EAAcxD,cAC3C3R,KAAK,WAAW,WACfwS,GAAe,MAEhBxS,KAAK,UALR,uCAKmB,WAAOC,GAAP,SAAA1Q,EAAA,sDACfijB,GAAe,GACf/T,EAAU0W,EAAclV,EAAOC,iBAFhB,2CALnB,uDASGF,KAAK,SAAS,SAACK,GACd,IAAMgV,EAAWvd,EAAE,oDAEnBgH,EAAWhH,EAAE,SAAH,OAAauI,QAAb,IAAaA,OAAb,EAAaA,EAAOC,SAC9BkS,GAAe,GACfviB,QAAQoQ,MAAMgV,EAAUhV,OAsGlB/O,UAAWihB,EACXhS,QAASgS,EAAc,eAAC,IAAD,CAAenZ,MAAM,eAAeoH,MAAI,IAAM,KALvE,SAOG1I,EAAEyb,KAGL,eAACnI,GAAA,EAAD,CAActS,MAAM,WAGxB,eAAC,KAAD,CAAMyD,GAAG,IAAImD,SAAS,OAAO6C,WAAY,EAAGnJ,MAAM,aAAlD,SACGtB,EAAE,wFCxEEwd,GA/JqC,SAAC,GAO9C,IANLjnB,EAMI,EANJA,MACAgf,EAKI,EALJA,UACA4B,EAII,EAJJA,aACAC,EAGI,EAHJA,eACAvK,EAEI,EAFJA,eACAC,EACI,EADJA,eACI,EACsB5P,mBAAgB,CACxCugB,mBAAmB,EACnBloB,SAAUQ,IAAYC,OAHpB,mBACGoF,EADH,KACUsiB,EADV,KAKI1d,EAAMC,eAAND,EACFkD,EAAW2U,cACT9Q,EAAiBD,eAAjBC,aACAzM,EAAYkE,cAAZlE,QACF4D,EAAWC,cACTuZ,EAAiBC,cAAjBD,aACA+F,EAAgCriB,EAAhCqiB,kBAAmBloB,EAAa6F,EAAb7F,SACrBooB,EAAgBjG,GAAgBnhB,EAAMhC,WAAa2O,EACnD0a,EAAkBroB,IAAaQ,IAAYC,KAAOgK,EAAE,MAAMuR,cAAgBvR,EAAE,QAAQuR,cAbtF,EAc2CmD,aAC7C,sBAAKzT,MAAO,CAAE0T,WAAY,UAA1B,mBAA0CxP,GAAUoQ,GAApD,UACA,CAAEX,UAAW,QAFPC,EAdJ,EAcIA,UAAWC,EAdf,EAceA,eAAgBC,EAd/B,EAc+BA,QAO7B8I,EAAqBtnB,EAAMhC,WAAa2O,EAcxC4a,GAXA3G,IAAgBC,GAII,OAApB7gB,EAAMzB,UASNipB,EAAa,kBACjBL,GAAS,SAACM,GAAD,mBAAC,eACLA,GADI,IAEPP,mBAAmB,QAGjBQ,EAAoB,SAACC,GACzBR,GAAS,SAACM,GAAD,mBAAC,eACLA,GADI,IAEPP,mBAAmB,EACnBloB,SAAU2oB,QAWR5R,EAAa,uCAAG,WAAO+Q,EAAyBznB,GAAhC,SAAA6B,EAAA,sDAEpByG,EACE9B,GAAsB,CACpB9B,UACAE,QAASjE,EAAM/B,GACfmB,IAAK,CACHC,OACAW,QACAhB,WACAM,OAAQ8O,GAAa0Y,GAAcvV,WACnC5R,SAAS,MAKf6nB,IAEAhX,EACE/G,EAAE,YACFA,EAAE,8BAA+B,CAC/BzK,SAAUqoB,KArBM,2CAAH,wDA8BnB,OACE,gBAAC,GAAD,CAAU7E,UAAW0E,EAAmBza,OAAO,QAA/C,UACE,gBAAC,GAAD,WACE,eAAC,GAAD,CACE3K,OAAO,OACP/D,MAAOiC,EAAMjC,MACbyiB,YAAa8G,EACbtU,KAAM,eAAC,KAAD,CAAuBjI,MAAM,QAAQH,GAAG,MAAMH,MAAM,SAC1DoD,MAAOpE,EAAE,UAEX,gBAAC,IAAD,CAAUuH,EAAE,OAAZ,UACE,eAAC,GAAD,CAAiBgO,UAAWA,EAAWnP,WAAYyG,EAAgB9B,WAAYoM,IAC/E,eAAC,GAAD,CAAgBtM,OAAQiT,EAAkBhT,QAASgT,EAAnD,SACGA,EACC,uCACE,eAAC,GAAD,CAAc5oB,YAAaqB,EAAMrB,YAAaqP,GAAG,QACjD,eAAC,IAAD,CACElD,QAAQ,UACRL,MAAM,OACNI,QAAS,kBAAM6c,EAAkBloB,IAAYC,OAC7CuO,GAAG,MACHyE,UAAW8U,GAAoBH,EALjC,SAOG3d,EAAE,cAEL,eAAC,IAAD,CACEqB,QAAQ,SACRL,MAAM,OACNI,QAAS,kBAAM6c,EAAkBloB,IAAYE,OAC7C+S,UAAW8U,GAAoBH,EAJjC,SAMG3d,EAAE,mBAIP,uCACE,sBAAKE,IAAK2U,EAAV,SACE,eAAC,IAAD,CAAQ7L,UAAQ,EAACM,UAxCxB/T,IAAaQ,IAAYC,KAAO,eAAC,IAAD,CAAasL,MAAM,iBAAoB,eAAC,IAAD,CAAeA,MAAM,iBAwC/BN,MAAM,OAAOuD,GAAG,MAAtE,SACGvE,EAAE,qBAAsB,CAAEzK,SAAUqoB,QAGzC,eAAC,GAAD,CAAc1oB,YAAaqB,EAAMrB,cAChC4f,GAAkBC,OAIzB,eAAC,GAAD,CACEQ,UAAWA,EACXnP,WAAY0G,EACZ/C,YAAahU,IAAYE,KACzB8U,WAAYqM,UAIlB,eAAC,GAAD,CACEmD,OAAQwD,EACRpX,UAAW2F,EACX/W,SAAUA,EACV+kB,eA/FiB,WACrBoD,GAAS,SAACM,GAAD,mBAAC,eACLA,GADI,IAEPzoB,SAAUyoB,EAAUzoB,WAAaQ,IAAYC,KAAOD,IAAYE,KAAOF,IAAYC,iB,UC9E1EmoB,GATW,WAAyB,IAAxBC,EAAuB,uDAAN,EACpClb,EAAW2U,cACXwG,EAAuBC,cACvBC,EAAcH,EAAiBlb,EAC/BjF,EAAUugB,aAAkBH,EAAuBE,GAEzD,OAAOtgB,GCqCMwgB,GAjCqC,SAAC,GAAe,IAAbloB,EAAY,EAAZA,MAC7CyJ,EAAMC,eAAND,EACFkD,EAAW2T,cACX5f,EAAeoW,cACfyJ,EAAoBvgB,EAAMhC,WAAa2O,EACvCjF,EAAUkgB,GAAkB5nB,EAAMjC,MAAQ2C,EAAe,GACzDynB,EAAY/Y,GAAgB1H,GAElC,OACE,gBAAC,GAAD,WACE,eAAC,GAAD,CACE5F,OAAO,OACPkR,KAAM,eAAC,KAAD,CAAUpI,GAAG,MAAMH,MAAM,SAC/BoD,MAAOpE,EAAE,SACT1L,MAAOiC,EAAMjC,MACbyiB,YAAaD,IAEf,gBAAC,IAAD,CAAUvP,EAAE,OAAZ,UACE,eAAC,GAAD,CAAiB8N,YAAU,IAC3B,eAAC,GAAD,UACE,gBAAC,KAAD,CAAM1N,UAAU,SAAhB,UACE,eAAC,KAAD,CAAM0C,MAAI,EAAV,SAAYrK,EAAE,kBACd,eAAC,KAAD,CAAM4H,SAAS,OAAOyC,MAAI,EAA1B,oBACOqU,UAIX,eAAC,GAAD,CAAiB3U,YAAahU,IAAYE,KAAMof,YAAU,WC4BnDsJ,GAzD6B,SAAC,GAAe,IAAbpoB,EAAY,EAAZA,MACrC/B,EAA0E+B,EAA1E/B,GAAIF,EAAsEiC,EAAtEjC,MAAOQ,EAA+DyB,EAA/DzB,UAAWE,EAAoDuB,EAApDvB,WAAYE,EAAwCqB,EAAxCrB,YAAaI,EAA2BiB,EAA3BjB,WAAYD,EAAekB,EAAflB,WAC7D4B,EAAeoW,cACb/S,EAAYkE,cAAZlE,QACF3E,EAAM0hB,YAAmB/c,EAAS9F,GAClCuW,EAAqB,OAARpV,EACbwhB,EAAepM,GAAcpV,EAAIJ,WAAaQ,IAAYC,KAC1DohB,EAAiBrM,GAAcpV,EAAIJ,WAAaQ,IAAYE,KAC5D4W,EAAiB5G,GAAc/Q,EAAaI,GAC5CwX,EAAiB7G,GAAc/Q,EAAaG,GAGlD,OAAIf,IAAU2C,GAA8B,OAAdnC,EAE1B,eAAC,GAAD,CACEyB,MAAOA,EACP6gB,eAAgBA,EAChBD,aAAcA,EACd5B,UAAS,OAAE5f,QAAF,IAAEA,OAAF,EAAEA,EAAKE,OAChBgX,eAAgBA,EAChBC,eAAgBA,IAMH,OAAf9X,GAAuBV,IAAU2C,EAAe,EAEhD,eAAC,GAAD,CACEse,UAAS,OAAE5f,QAAF,IAAEA,OAAF,EAAEA,EAAKE,OAChBuhB,eAAgBA,EAChBD,aAAcA,EACd5gB,MAAOA,EACPsW,eAAgBA,EAChBC,eAAgBA,IAMlBxY,EAAQ2C,EACH,eAAC,GAAD,CAAeV,MAAOA,IAK7B,eAAC,GAAD,CACEA,MAAOA,EACP6gB,eAAgBA,EAChBD,aAAcA,EACd5B,UAAS,OAAE5f,QAAF,IAAEA,OAAF,EAAEA,EAAKE,OAChBgX,eAAgBA,EAChBC,eAAgBA,KCzDhB8R,GAAQhgB,aAAOgM,IAAPhM,CAAH,0QAWP,qBAAGE,MAAkBW,aAAaof,MAUhCC,GAAQlgB,aAAOmgB,KAAPngB,CAAH,sIAIP,qBAAGE,MAAkBW,aAAaof,MAMhCG,GAAQpgB,aAAOmgB,KAAPngB,CAAH,gIAKP,qBAAGE,MAAkBW,aAAaof,MAKhCI,GAAWrgB,aAAOmgB,KAAPngB,CAAH,uFACV,qBAAGE,MAAkBW,aAAaof,MAMhCK,GAAQtgB,aAAOqX,IAAPrX,CAAH,+QACM,kBAAsB,UAAtB,EAAGugB,IAA6B,WAAa,gBAC3C,kBAAsB,UAAtB,EAAGA,IAA6B,mBAAqB,sBAI3D,kBAAsB,UAAtB,EAAGA,IAA6B,eAAiB,kBAE1D,qBAAGrgB,MAAkBW,aAAaof,MAIvB,kBAAsB,UAAtB,EAAGM,IAA6B,mBAAqB,sBAIvDC,GAA2B,WACtC,IAAMjiB,EAAQ2a,cAD8B,EAEhBK,sBAAW,CACrCC,MAAO,EACPC,IAAKlb,EAAM2K,WACXwQ,SAAU,EACVC,SAAU,IAJJC,EAFoC,EAEpCA,QAASC,EAF2B,EAE3BA,OAWjB,OAJA9a,qBAAU,WACR8a,EAAOtb,EAAM2K,cACZ,CAAC3K,EAAOsb,IAGT,gBAAC,IAAD,CAAK9F,GAAG,OAAOpd,SAAS,WAAW8pB,QAAQ,eAA3C,UACE,eAACT,GAAD,CAAO5I,KAAM,EAAb,SACE,eAAC,IAAD,MAEF,gBAACkJ,GAAD,CAAOC,IAAI,OAAX,UACE,eAACL,GAAD,CAAOzU,MAAI,EAACT,cAAc,YAA1B,qBAGA,eAACoV,GAAD,CAAOpX,SAAS,OAAhB,oBAA4B4Q,YAUvB8G,GAAwC,SAAC,GAAkB,IAAhBpc,EAAe,EAAfA,SAChDjF,EAAUkgB,KACVO,EAAY/Y,GAAgB1H,GAC1B+B,EAAMC,eAAND,EAER,OACE,gBAAC,IAAD,CAAKuf,GAAG,OAAOhqB,SAAS,WAAxB,UACE,gBAAC2pB,GAAD,CAAOC,IAAI,QAAX,UACE,eAACL,GAAD,CAAOzU,MAAI,EAAC/I,MAAM,YAAlB,SACe,IAAZrD,EAAgB+B,EAAE,WAAa0e,IAElC,eAACO,GAAD,CAAUrX,SAAS,OAAnB,SAA2B1E,OAE7B,eAAC0b,GAAD,CAAO9I,MAAO,EAAd,SACE,eAAC,KAAD,UCjHF0J,GAAoB5gB,aAAOqX,IAAPrX,CAAH,6MAQnB,qBAAGE,MAAkBW,aAAaof,MAKhCY,GAAO7gB,KAAOC,IAAV,8GA0CK6gB,GAnCK,WAAO,IACjB9d,EAAW0X,KAAX1X,OACF3K,EAAeoW,cACfxW,EAAS8oB,cAiBf,OACE,gBAACH,GAAD,WACE,eAAC,IAAD,CAAYne,QAAQ,OAAOwM,MAAM,KAAKzM,QAjBlB,WACtBQ,EAAOge,aAgBL,SACE,eAAC,IAAD,CAAete,MAAM,UAAUN,MAAM,WAEvC,eAACye,GAAD,CAAMre,QAZgB,WACxB,IAAMye,EAAoBhpB,EAAOipB,WAAU,SAACvpB,GAAD,OAAWA,EAAMjC,QAAU2C,KAEtE2K,EAAOme,QAAQF,EAAoB,GACnCje,EAAO6W,UAQL,SACE,eAAC,IAAD,CAAgBzX,MAAM,WAExB,eAAC,IAAD,CAAYK,QAAQ,OAAOwM,MAAM,KAAKzM,QAnBlB,WACtBQ,EAAOoe,aAkBL,SACE,eAAC,IAAD,CAAkB1e,MAAM,UAAUN,MAAM,eChCjCif,GAhBO,WACpB,IAAMtmB,EAAoB8U,cACpBvQ,EAAWC,cACT7D,EAAYkE,cAAZlE,QAMR,OACE,eAAC,IAAD,CAAY+G,QAAQ,SAASwI,GAAG,MAAMzI,QALpB,WAClBlD,EAAS3C,IAAoB,KAI+B/B,UAAWG,EAAmBqP,UAAW1O,EAArG,SACGX,EAAoB,eAAC,IAAD,CAAe+O,MAAI,EAACpH,MAAM,UAAa,eAAC,IAAD,CAAaN,MAAM,OAAOM,MAAM,aCV5F4e,GAASthB,KAAOC,IAAV,gGAIR,qBAAGC,MAAkBW,aAAaof,MAKhCsB,GAAoBvhB,KAAOC,IAAV,wHAInB,qBAAGC,MAAkBW,aAAaof,MAMhCuB,GAAoBxhB,KAAOC,IAAV,0EAGnB,qBAAGC,MAAkBW,aAAaof,MAKhCwB,GAAuBzhB,KAAOC,IAAV,oGAItB,qBAAGC,MAAkBW,aAAaof,MAuCvByB,GAlCF,WACX,OACE,gBAAC,GAAD,CAAS7Y,WAAW,SAASF,EAAE,OAA/B,UACE,eAAC2Y,GAAD,UACE,eAAC,GAAD,MAEF,eAAC,GAAD,CAASxY,eAAe,SAAxB,SACE,eAAC,GAAD,MAEF,eAACwY,GAAD,UACE,gBAAC,IAAD,CAAMzY,WAAW,SAASC,eAAe,WAAzC,UACE,eAAC0Y,GAAD,UACE,eAAC,GAAD,CAAYld,SAAS,UAEvB,eAACid,GAAD,UACE,eAAC,IAAD,CACE9e,QAAQ,SACRoD,GAAG,IACH4D,KAAK,uDACLkY,OAAO,SACPC,IAAI,sBALN,SAOE,eAAC,IAAD,CAAUxf,MAAM,OAAOM,MAAM,cAGjC,eAAC+e,GAAD,UACE,eAAC,GAAD,e,UCrCGI,GAtBQ,WACrB,IAAMxpB,EAAeoW,cACfxW,EAAS8oB,cACPrlB,EAAYkE,cAAZlE,QACFomB,EAAgBC,aAAiB1pB,GAC/B2K,EAAW0X,KAAX1X,OACF1D,EAAWC,cAEjBR,qBAAU,WACR,GAAIiE,QAA2BH,IAAjBxK,QAAgDwK,IAAlBif,GAA+BzpB,IAAiBypB,EAAe,CACzG,IAAMb,EAAoBhpB,EAAOipB,WAAU,SAACvpB,GAAD,OAAWA,EAAMjC,QAAU2C,KAGtEiH,EAASvD,GAAiB,CAAEL,UAASM,SAAU/D,EAAOF,KAAI,SAACJ,GAAD,OAAWA,EAAM/B,SAG3EoN,EAAOme,QAAQF,EAAoB,GACnCje,EAAO6W,YAER,CAACiI,EAAezpB,EAAcJ,EAAQ+K,EAAQtH,EAAS4D,KClB5D0iB,KAAWC,IAAI,CAACC,KAAUC,OAE1B,I,0CCHKC,GDGCC,GAAeriB,KAAOC,IAAV,mJA4CHqiB,GAlCa,WAAO,IACzBrf,EAAcyX,KAAdzX,UACFhL,EAAS8oB,cACTwB,EAAeC,KAAKC,MAAMxqB,EAAO6D,OAAS,GAIhD,OAFA+lB,KAGE,gBAAC,IAAD,CAAK1c,SAAS,SAAd,UACE,eAAC,GAAD,IACA,eAACkd,GAAD,UACE,eAAC,KAAD,CACEK,aAAcH,EACdI,SAAU1f,EACV2f,aAAc,GACdC,cAAc,OACdC,UAAQ,EACRC,gBAAc,EACdC,gBAAc,EACdzF,YAAU,EACVF,UAAQ,EACR4F,gBAAc,EAVhB,SAYGhrB,EAAOF,KAAI,SAACJ,GAAD,OACV,eAAC,KAAD,UACE,eAAC,GAAD,CAAWA,MAAOA,KADFA,EAAM/B,eE7B9BstB,GAAoBljB,aAAOmjB,IAAPnjB,CAAH,yaACD,qBAAGE,MAAkBsM,KAAKC,cAIrC,qBAAGvM,MAAkBC,OAAOijB,QAOf,qBAAGljB,MAAkBsM,KAAKC,cAI9C,qBAAGvM,MAAkBW,aAAaof,MAKhCoD,GAAerjB,KAAOC,IAAV,mJAQZqjB,GAAYtjB,KAAOC,IAAV,0EAKTsjB,GAAcvjB,KAAOC,IAAV,yHAIN,qBAAGpF,kBAA6C,QAAU,KAG/D2oB,GAAgBxjB,KAAOC,IAAV,uGAGf,qBAAGC,MAAkBW,aAAaof,MAMhCwD,GAAezjB,KAAOC,IAAV,iMAaZyjB,GAAS1jB,KAAOC,IAAV,kUACI,qBAAGC,MAAkBC,OAAO4N,YAMpB,qBAAG7N,MAAkBC,OAAOwjB,cAqGrCC,GAzFW,WACxB,IAAMC,EAAkBtiB,mBAClBuiB,EAAWviB,mBACXwiB,EAAYxiB,mBACZ1G,EAAoB6G,cACpB5G,EAAkBkpB,cAClB1kB,EAAWC,cACT6B,EAAMC,eAAND,EACF3H,EAASgI,cA6Cf,OA1BA1C,qBAAU,WACR,IACMklB,EAAaC,MAAS,WAAO,IACzB9f,EAAW0f,EAASliB,QAAQuiB,wBAA5B/f,OAGR9E,EAAS1C,GAAkBwH,EALX,QAMf,IAEGggB,EAAQC,aAAM,CAClBC,aAAc,EACdC,WAVgB,IAWhBC,OAAQP,EACRQ,WAAY,CACV,CACEC,MAAO,EACPC,QAASZ,EAAUniB,YAKzB,OAAO,WACLwiB,EAAMhhB,aAEP,CAAC2gB,EAAWD,EAAUxkB,IAGvB,wCACIxE,GACA,eAACooB,GAAD,CACEzgB,QAAQ,WACRwM,MAAM,KACNvE,UAAW5P,EAAkB,eAAC,IAAD,IAAoB,eAAC,IAAD,IACjD0H,QAlDgB,WACtB,IAAMoiB,GAAqB9pB,EAEvB8pB,IACFf,EAAgBjiB,QAAQS,MAAMwiB,WAAa,2BAC3ChB,EAAgBjiB,QAAQS,MAAMyiB,iBAnGV,kBAuGpBC,MAAM,WACJlB,EAAgBjiB,QAAQS,MAAMwiB,WAAa,KAC1C,MAGLvlB,EAAS1C,GAAkBgoB,KAgCvB,SAMqBxjB,EAAlBtG,EAAoB,QAAa,YAGtC,gBAAC0oB,GAAD,WACE,gBAACH,GAAD,CAAc/hB,IAAKuiB,EAAnB,UACE,gBAACJ,GAAD,WACGhqB,IAAWC,IAAiBsrB,OAAS,eAAC,GAAD,IACrCvrB,IAAWC,IAAiBC,QAAU,eAAC,GAAD,IACtCF,IAAWC,IAAiBnB,MAC3B,+BACE,eAAC,GAAD,SAIN,eAACmrB,GAAD,CAAQpiB,IAAKyiB,IACb,eAACT,GAAD,CAAWhiB,IAAKwiB,EAAhB,SACE,eAAC,GAAD,SAGJ,eAACP,GAAD,CAAa1oB,kBAAmBA,EAAhC,SACE,eAAC,GAAD,aCpKJoqB,GAAYjlB,KAAOC,IAAV,6CAITilB,GAASllB,KAAOC,IAAV,iEAKNklB,GAAmBnlB,KAAOC,IAAV,sKAEA,qBAAGC,MAAkBsM,KAAKC,cAK5C,qBAAGvM,MAAkBW,aAAaof,MAuEvBmF,GAtDI,WAAO,IAChBpiB,EAAW0X,KAAX1X,OACFqiB,EAAgB3jB,cAChB4jB,EAActB,cACdvqB,EAASgI,cACT0O,EAjBe,SAACkV,EAAwBC,GAC9C,OAAID,EACK,EAGLC,EACK,EAGF,EAQaC,CAAeF,EAAeC,GAC5ChmB,EAAWC,cACT7D,EAAYkE,cAAZlE,QAkBR,OACE,gBAACypB,GAAD,WACE,eAACF,GAAD,UACE,eAAC,IAAD,CAAYxiB,QAAQ,OAAOD,QAAS,kBAAMQ,EAAOge,aAAa5W,SAAU3Q,IAAWC,IAAiBnB,KAApG,SACE,eAAC,IAAD,CAAe6J,MAAM,OAAOM,MAAM,gBAGtC,eAACwiB,GAAD,UACE,gBAAC,IAAD,CAAY/U,YAAaA,EAAalB,MAAM,KAAKxM,QAAQ,SAAS2N,YAxBhD,SAACoV,GACvB,OAAQA,GACN,KAAK,EACHlmB,EAAS3C,IAAoB,IAC7B,MACF,KAAK,EACH2C,EAAS1C,IAAkB,IAC3B0C,EAAS3C,IAAoB,IAC7B,MACF,KAAK,EACL,QACE2C,EAAS3C,IAAoB,IAC7B2C,EAAS1C,IAAkB,MAY3B,UACE,eAAC,IAAD,UACE,eAAC,IAAD,CAAO8F,MAAM,mBAEf,eAAC,IAAD,UACE,eAAC,IAAD,CAAWA,MAAM,mBAEnB,eAAC,IAAD,CAAgB0H,UAAW1O,EAA3B,SACE,eAAC,IAAD,CAAagH,MAAM,wBAIzB,eAACuiB,GAAD,UACE,eAAC,IAAD,CAAYxiB,QAAQ,OAAOD,QAAS,kBAAMQ,EAAOoe,aAAahX,SAAU3Q,IAAWC,IAAiBnB,KAApG,SACE,eAAC,IAAD,CAAkB6J,MAAM,OAAOM,MAAM,oBC7FzC+iB,GAAczlB,KAAOC,IAAV,6CAIXylB,GAAe1lB,KAAOC,IAAV,2DAkBH0lB,GAbD,WACZ,OACE,gBAAC,IAAD,CAAM7S,cAAc,SAAS1O,OAAO,OAApC,UACE,eAACqhB,GAAD,UACE,eAAC,GAAD,MAEF,eAACC,GAAD,UACE,eAAC,GAAD,W,SHXHtD,K,sBAAAA,E,kBAAAA,E,eAAAA,Q,KAML,I,GAAMwD,GAAe5lB,KAAOC,IAAV,qJAMd,qBAAGC,MAAkBW,aAAaglB,MAKhCC,GAAO9lB,KAAOC,IAAV,iIAMM,qBAAG8lB,UAA6B,UAAY,YA2C7CC,GA5BU,WACvB,IAEMC,EAfQ,SAACprB,EAA4BC,GAC3C,OAAID,EACKunB,GAAS8D,QAGdprB,EACKsnB,GAAS+D,MAGX/D,GAASgE,UAMHC,CAFa3kB,cACFsiB,eAElBvqB,EAASgI,cAEf,OACE,gBAACmkB,GAAD,WACE,gBAAC,IAAD,CAAKxhB,OAAO,OAAOe,SAAS,SAASxO,SAAS,WAA9C,UACE,eAACmvB,GAAD,CAAMC,UAAWE,IAAS7D,GAASgE,UAAnC,SACE,gBAAC,IAAD,CAAMvd,WAAW,SAASzE,OAAO,OAAjC,UACG3K,IAAWC,IAAiBsrB,OAAS,eAAC,GAAD,IACrCvrB,IAAWC,IAAiBC,QAAU,eAAC,GAAD,IACtCF,IAAWC,IAAiBnB,MAAQ,eAAC,GAAD,SAGzC,eAACutB,GAAD,CAAMC,UAAWE,IAAS7D,GAAS+D,MAAnC,SACE,eAAC,GAAD,MAEF,eAACL,GAAD,CAAMC,UAAWE,IAAS7D,GAAS8D,QAAnC,SACE,eAAC,GAAD,SAGJ,eAAC,GAAD,QInDAI,GAAsBtmB,aAAOumB,KAAPvmB,CAAH,iGACT,qBAAGE,MAAkBC,OAAOC,UAAUomB,aAuEvCC,GAlEuC,SAAC,GAA8B,IAA5B1e,EAA2B,EAA3BA,UAAWD,EAAgB,EAAhBA,UAAgB,EACpCxJ,oBAAS,GAD2B,mBAC3EooB,EAD2E,KAC1DC,EAD0D,OAEpCroB,oBAAS,GAF2B,mBAE3EsoB,EAF2E,KAE1DC,EAF0D,KAG1EzlB,EAAMC,eAAND,EAeR,OACE,gBAAC,KAAD,CAAgBoE,MAAOpE,EAAE,YAAaqH,SAAS,QAA/C,UACE,eAAC6d,GAAD,UACE,eAAC,KAAD,UACE,eAAC,IAAD,CAASrX,MAAM,KAAf,SAAqB7N,EAAE,kBAG3B,gBAAC,KAAD,CAAWuH,EAAE,OAAOme,SAAS,QAA7B,UACE,gBAAC,IAAD,CAAKC,UAAU,QAAQC,UAAU,OAAjC,UACE,eAAC,IAAD,CAASnhB,GAAG,KAAKF,GAAG,OAApB,SACGvE,EAAE,8BAGL,eAAC,KAAD,CAAMyE,GAAG,IAAInD,MAAM,aAAaiD,GAAG,OAAnC,SACGvE,EAAE,gEAGL,wBAAO6lB,QAAQ,WAAW5kB,MAAO,CAAEoe,QAAS,QAAS1V,OAAQ,UAAWmc,aAAc,QAAtF,SACE,gBAAC,IAAD,CAAMre,WAAW,SAAjB,UACE,sBAAKxG,MAAO,CAAEC,KAAM,QAApB,SACE,eAAC,IAAD,CAAU1M,GAAG,WAAWqZ,MAAM,KAAKqB,QAASoW,EAAiBnW,SAjC1C,WAC/BoW,GAAoBD,QAkCV,eAAC,KAAD,CAAMzb,GAAG,MAAT,SACG7J,EACC,qIAKR,wBAAO6lB,QAAQ,YAAY5kB,MAAO,CAAEoe,QAAS,QAAS1V,OAAQ,UAAWmc,aAAc,QAAvF,SACE,gBAAC,IAAD,CAAMre,WAAW,SAAjB,UACE,sBAAKxG,MAAO,CAAEC,KAAM,QAApB,SACE,eAAC,IAAD,CAAU1M,GAAG,YAAYqZ,MAAM,KAAKqB,QAASsW,EAAiBrW,SAzC3C,WAC/BsW,GAAoBD,QA0CV,eAAC,KAAD,CAAM3b,GAAG,MAAT,SACG7J,EAAE,gGAKX,eAAC,IAAD,CAAQgB,MAAM,OAAOI,QA7CL,WACpBuF,IACAD,KA2CiDsC,UAAWsc,IAAoBE,EAA5E,SACGxlB,EAAE,qBC7CE+lB,GAjCyC,SAAC,GAA8B,IAA5Bpf,EAA2B,EAA3BA,UAAWD,EAAgB,EAAhBA,UAC5D1G,EAAMC,eAAND,EAOR,OACE,eAAC,KAAD,CAAgBoE,MAAOpE,EAAE,YAAaqH,SAAS,QAA/C,SACE,gBAAC,KAAD,CAAWE,EAAE,OAAOme,SAAS,QAA7B,UACE,eAAC,KAAD,CAAMjhB,GAAG,IAAIF,GAAG,OAAhB,SACGvE,EAAE,2FAEL,eAAC,KAAD,CAAMyE,GAAG,IAAIF,GAAG,OAAhB,SACGvE,EAAE,0EAEL,eAAC,IAAD,CAAQgB,MAAM,OAAOI,QAdL,WACpBuF,IACAD,KAYiDnC,GAAG,OAAhD,SACGvE,EAAE,kBAEL,eAAC,IAAD,CAAM0H,eAAe,SAASD,WAAW,SAAzC,SACE,eAAC,KAAD,CACEY,KAAK,6GACL2E,UAAQ,EAFV,SAIGhN,EAAE,wBC+FAgmB,UAnGK,WAAO,IACjBC,EAASC,eAATD,KADgB,EAEsBE,cAAgB,EAAO,qCAF7C,mBAEjBC,EAFiB,KAEAC,EAFA,OAGwBF,cAAgB,EAAO,6BAH/C,mBAGjBG,EAHiB,KAGCC,EAHD,KAIhBjsB,EAAYkE,cAAZlE,QACFjC,EAASgI,cACT3G,EAAkBkpB,cAClB1kB,EAAWC,cACXqoB,EAAeC,cACfC,EAAYT,EATM,EAYUnd,aAAS,eAAC,GAAD,CAAgBnC,UAF3B,kBAAM0f,GAAmB,OAE0C,GAA5FM,EAZiB,sBAaW7d,aAAS,eAAC,GAAD,CAAiBnC,UAFnC,kBAAM4f,GAAoB,OAE2C,GAAxFK,EAbiB,oBAgBlBC,EAA6B1mB,iBAAOwmB,GACpCG,EAA8B3mB,iBAAOymB,GA+D3C,OA5DAjpB,qBAAU,WACHyoB,GACHS,EAA2BrmB,YAE5B,CAAC4lB,EAAiBS,IAGrBlpB,qBAAU,YACH2oB,GAAoB5sB,GACvBotB,EAA4BtmB,YAE7B,CAACsmB,EAA6BR,EAAkB5sB,IAEnDiE,qBAAU,WAuCJ6oB,EAAe,GAtCG,uCAAG,oDAAA/uB,EAAA,sEAC2ByK,QAAQ6kB,IAAI,CAACvvB,KAA4BgB,OADpE,OAQvB,GARuB,4BAChBwuB,EADgB,KACOvoB,EADP,KAEfxH,EAA+C+vB,EAA/C/vB,aAAca,EAAiCkvB,EAAjClvB,eAAgBG,EAAiB+uB,EAAjB/uB,aAChCgvB,EAAcxoB,EAAW5H,OAAOqwB,MAAK,SAAC3wB,GAAD,OAAWA,EAAMjC,QAAU2C,KAGtEiH,EAASvD,GAAiB,CAAEL,UAASM,SAAU6D,EAAW5H,OAAOF,KAAI,SAACJ,GAAD,OAAWA,EAAM/B,SAElFiK,EAAW5F,OAAOb,OACpBkG,EAAS/C,GAAoB7C,IAAiBC,cACzC,GAAI0uB,GAAeA,EAAY3yB,QAAU2C,EAAc,CAK5D,IAJMkwB,EAAyBhzB,OAAO8yB,EAAY1yB,YAC5C6yB,EAAe,GACfC,GAAgBvvB,EAAiBG,GAAgB,EAE9CqvB,EAAI,EAAGA,GAnDG,EAmDsBA,IACvCF,EAAaG,KAAKlzB,EAAwB4C,EAAeqwB,GAAIH,EAAyBE,GAAgBC,IAGlGE,EAAY5wB,EAAc,GAAD,mBAAK6H,EAAW5H,QAAhB,YAA2BuwB,EAAazwB,IAAIH,MAE3E0H,EACExC,GAAW,2BACLsrB,GADI,IAERptB,cAAeC,IAAcC,IAC7BC,6BAA8BotB,EAC9BtwB,OAAQ2wB,EACRrtB,QAAS,GACT3E,KAAM,YAKV0I,EAAS/C,GAAoB7C,IAAiBsrB,QAjCzB,4CAAH,oDAuCpB6D,KAED,CAACjB,EAActoB,EAAU5D,IAE5BiE,KACAP,KAEI3F,IAAWC,IAAiBiB,QACvB,eAACmuB,GAAA,EAAD,IAIP,uCACE,eAAC,IAAD,UACE,yBAAQrjB,IAAI,mCAAmC6M,KAAK,kBAAkB1c,GAAG,wBAE3E,eAAC,GAAD,UACE,gBAAC,GAAD,WACGkyB,EAAY,eAAC,GAAD,IAAc,eAAC,GAAD,IAC3B,eAAC,GAAD,c,iCCxHV,6SAKa/hB,EAAe,SAACC,GAC3B,OAAO/G,YAAiB+G,EAAO,KAGpBI,EAAY,SAACC,GACxB,MAAM,IAAN,OAAWC,YAAaD,GAAO,EAAG,EAAG,KAG1BE,EAAY,SAACC,GACxB,OAAOA,EAAMA,EAAIC,oBAAe5D,EAAW,CAAE6D,sBAAuB,EAAGC,sBAAuB,IAAO,KAG1F2E,EAAc,SAAC6R,GAC1B,OAAOA,EAAQA,EAAM1W,oBAAe5D,EAAW,CAAE6D,sBAAuB,EAAGC,sBAAuB,IAAO,KAO9FC,EAAU,SAACC,GAAD,OAAiBA,EAAIhR,WAAWiR,SAAS,EAAG,MAEtDC,EAAkB,SAACC,GAAkC,IAAD,EAC3BC,YAAeD,GAA3CE,EADuD,EACvDA,MAAOC,EADgD,EAChDA,QAAS9H,EADuC,EACvCA,QAClB+H,EAAc,UAAMR,EAAQO,GAAd,YAA0BP,EAAQvH,IAEtD,OAAI6H,EAAQ,EACJ,GAAN,OAAUN,EAAQM,GAAlB,YAA4BE,GAGvBA,GAGIC,EAAgB,SAACC,EAAerQ,GAC3C,OAAc,IAAVqQ,GAA0B,IAAXrQ,EACV,EAGFqQ,EAAQrQ,GAMJsQ,EAAY,SAACxQ,GACxB,IAAKA,IAAQA,EAAIY,MACf,OAAO,EAF4B,MAKWZ,EAAIY,MAA5CjB,EAL6B,EAK7BA,WAAYD,EALiB,EAKjBA,WAAYH,EALK,EAKLA,YAC1BkR,EAAaH,EAAc/Q,EAAaS,EAAIJ,WAAaQ,IAAYC,KAAOV,EAAaD,GAC/F,OAAOM,EAAIE,OAASuQ,GAITC,EAAyB,SAACvH,GACrC,OAAIA,EAAMsE,OACD,sEAGF,yE,iCClET,oJAEawP,EAAuB,SAACxc,GACnC,MAAM,GAAN,OAAUuxB,IAAV,oBAAuCvxB,IAG5BkS,EAA2B,SAACF,GACvC,MAAM,GAAN,OAAUuf,IAAV,eAAkCvf,IAGvB2E,EAA2B,SAAC1W,GACvC,MAAM,GAAN,OAAUsxB,IAAV,kBAAqCtxB,IAG1BuxB,EAA8B,SAACvxB,GAC1C,MAAM,GAAN,OAAUsxB,IAAV,4BAA+CtxB,K,qPCepCwxB,EAAiB,WAAO,IAC3BC,EAAgBC,cAAhBD,YAD0B,EAEI5qB,qBAFJ,mBAE3B8qB,EAF2B,KAEdC,EAFc,KAclC,OAVAtqB,qBAAU,WAAM,4CACd,8BAAAlG,EAAA,6DACQywB,EAAeC,cADvB,SAEuBD,EAAavwB,QAAQqwB,cAAcnwB,OAF1D,OAEQuwB,EAFR,OAGEH,EAAe,IAAInqB,IAAmB,IAATsqB,IAH/B,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACP,IAEGE,GAGIM,EAAmB,SAACC,GAA0B,IAAD,EAC1BrrB,mBAASjD,KADiB,mBACjD2iB,EADiD,KACxC4L,EADwC,KAEhDV,EAAgBC,cAAhBD,YACFW,EAAOC,cAYb,OAVA/qB,qBAAU,YACU,uCAAG,8BAAAlG,EAAA,6DACbkxB,EAAWC,YAAiBL,EAAcE,GAD7B,SAEDE,EAAShxB,QAAQkxB,UAAU,8CAA8ChxB,OAFxE,mBAEbixB,EAA8F,IAFjF,KAGnBN,EAAW,IAAI1qB,IAAUgrB,IAHN,2CAAH,qDAMlBC,KACC,CAACN,EAAMF,EAAcT,IAEjBlL,GAGIoM,EAAmB,WAAO,IAAD,EACN9rB,mBAASjD,KADH,mBAC7B2iB,EAD6B,KACpB4L,EADoB,KAE5BluB,EAAYkE,cAAZlE,QAF4B,EAGI+C,cAAhCC,EAH4B,EAG5BA,YAAaE,EAHe,EAGfA,eACfirB,EAAOC,cAab,OAXA/qB,qBAAU,WAMJrD,GALc,uCAAG,4BAAA7C,EAAA,sEACSgxB,EAAKQ,IAAIC,WAAW5uB,GAD7B,OACb6uB,EADa,OAEnBX,EAAW,IAAI1qB,IAAUqrB,IAFN,2CAAH,oDAMhBJ,KAED,CAACzuB,EAASmuB,EAAMnrB,EAAakrB,IAEzB,CAAE5L,UAASrf,QAASC,IAGdsd,IA5ES,SAACyN,GAA0B,IAAD,EAClBrrB,mBAASjD,KADS,mBACzC2iB,EADyC,KAChC4L,EADgC,KAExCluB,EAAYkE,cAAZlE,QACFmuB,EAAOC,cACLU,EAAgBrB,cAAhBqB,YAcR,OAZAzrB,qBAAU,WAOJrD,GANc,uCAAG,8BAAA7C,EAAA,6DACbkxB,EAAWC,YAAiBL,EAAcE,GAD7B,SAEDE,EAAShxB,QAAQkxB,UAAUvuB,GAASzC,OAFnC,OAEbixB,EAFa,OAGnBN,EAAW,IAAI1qB,IAAUgrB,IAHN,2CAAH,oDAOhBC,KAED,CAACzuB,EAASiuB,EAAcE,EAAMW,IAE1BxM,I,mFCVMlE,IARqC,SAAC,GAAwC,IAAtCnkB,EAAqC,EAArCA,WAAYQ,EAAyB,EAAzBA,SAAa8T,EAAY,yCAEpFwgB,GADmB1R,cAAjBD,aAC6BnjB,IAAeQ,EAAWR,GAAe,IACxE+0B,EAAWD,GAAe,IAAMA,EAAc,IAEpD,OAAO,cAAC,KAAD,aAAUE,YAAaD,GAAczgB,M,4FCgC/B2V,IAvCW,SAACzH,GACzB,IAAM3Y,EAAQ+B,iBAAsC,MADH,EAEDjD,mBAAS,GAFR,mBAE1CssB,EAF0C,KAExBC,EAFwB,KAoCjD,OAhCA9rB,qBAAU,WA2BR,OA1BoB,uCAAG,8BAAAlG,EAAA,6DACfgxB,EAAOiB,cADQ,SAEMjB,EAAKQ,IAAIU,iBAFf,OAEfjS,EAFe,OAIjBX,EAAcW,IAChB+R,GAAqB1S,EAAcW,GAAgBkS,KAG/CxrB,EAAMoC,SACRlC,cAAcF,EAAMoC,SAGtBpC,EAAMoC,QAAUnC,aAAY,WAC1BorB,GAAoB,SAACI,GAKnB,OAJ6B,IAAzBA,GACFvrB,cAAcF,EAAMoC,SAGfqpB,EAAuB,OAE/B,MApBgB,2CAAH,oDAwBpBC,GAEO,WACLxrB,cAAcF,EAAMoC,YAErB,CAACipB,EAAqB1S,EAAa3Y,IAE/BorB","file":"static/js/11.421d329a.chunk.js","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { GRAPH_API_PREDICTION_WITH_TOKEN } from 'config/constants/endpoints'\nimport { Bet, BetPosition, Market, PredictionStatus, Round, RoundData } from 'state/types'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getPredictionsWithTokenContract } from 'utils/contractHelpers'\nimport {\n  BetResponse,\n  getRoundBaseFields,\n  getBetBaseFields,\n  getUserBaseFields,\n  RoundResponse,\n  MarketResponse,\n} from './queries'\n\nexport enum Result {\n  WIN = 'win',\n  LOSE = 'lose',\n  CANCELED = 'canceled',\n  LIVE = 'live',\n}\n\nexport const numberOrNull = (value: string) => {\n  if (value === null) {\n    return null\n  }\n\n  const valueNum = Number(value)\n  return Number.isNaN(valueNum) ? null : valueNum\n}\n\nexport const makeFutureRoundResponse = (epoch: number, startBlock: number): RoundResponse => {\n  return {\n    id: epoch.toString(),\n    epoch: epoch.toString(),\n    startBlock: startBlock.toString(),\n    failed: null,\n    startAt: null,\n    lockAt: null,\n    lockBlock: null,\n    lockPrice: null,\n    endBlock: null,\n    closePrice: null,\n    totalBets: '0',\n    totalAmount: '0',\n    bearBets: '0',\n    bullBets: '0',\n    bearAmount: '0',\n    bullAmount: '0',\n    position: null,\n    bets: [],\n  }\n}\n\nexport const transformBetResponse = (betResponse: BetResponse): Bet => {\n  const bet = {\n    id: betResponse.id,\n    hash: betResponse.hash,\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\n    claimed: betResponse.claimed,\n    user: {\n      id: betResponse.user.id,\n      address: betResponse.user.address,\n      block: numberOrNull(betResponse.user.block),\n      totalBets: numberOrNull(betResponse.user.totalBets),\n      totalBNB: numberOrNull(betResponse.user.totalBNB),\n    },\n  } as Bet\n\n  if (betResponse.round) {\n    bet.round = transformRoundResponse(betResponse.round)\n  }\n\n  return bet\n}\n\nexport const transformRoundResponse = (roundResponse: RoundResponse): Round => {\n  const {\n    id,\n    epoch,\n    failed,\n    startBlock,\n    startAt,\n    lockAt,\n    lockBlock,\n    lockPrice,\n    endBlock,\n    closePrice,\n    totalBets,\n    totalAmount,\n    bullBets,\n    bearBets,\n    bearAmount,\n    bullAmount,\n    position,\n    bets = [],\n  } = roundResponse\n\n  const getRoundPosition = (positionResponse: string) => {\n    if (positionResponse === 'Bull') {\n      return BetPosition.BULL\n    }\n\n    if (positionResponse === 'Bear') {\n      return BetPosition.BEAR\n    }\n\n    return null\n  }\n\n  return {\n    id,\n    failed,\n    epoch: numberOrNull(epoch),\n    startBlock: numberOrNull(startBlock),\n    startAt: numberOrNull(startAt),\n    lockAt: numberOrNull(lockAt),\n    lockBlock: numberOrNull(lockBlock),\n    lockPrice: lockPrice ? parseFloat(lockPrice) : null,\n    endBlock: numberOrNull(endBlock),\n    closePrice: closePrice ? parseFloat(closePrice) : null,\n    totalBets: numberOrNull(totalBets),\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\n    bullBets: numberOrNull(bullBets),\n    bearBets: numberOrNull(bearBets),\n    bearAmount: numberOrNull(bearAmount),\n    bullAmount: numberOrNull(bullAmount),\n    position: getRoundPosition(position),\n    bets: bets.map(transformBetResponse),\n  }\n}\n\nexport const transformMarketResponse = (marketResponse: MarketResponse): Market => {\n  return {\n    id: marketResponse.id,\n    paused: marketResponse.paused,\n    epoch: Number(marketResponse.epoch.epoch),\n  }\n}\n\nexport const makeRoundData = (rounds: Round[]): RoundData => {\n  return rounds.reduce((accum, round) => {\n    return {\n      ...accum,\n      [round.id]: round,\n    }\n  }, {})\n}\n\nexport const getRoundResult = (bet: Bet, currentEpoch: number): Result => {\n  const { round } = bet\n  if (round.failed) {\n    return Result.CANCELED\n  }\n\n  if (round.epoch >= currentEpoch - 1) {\n    return Result.LIVE\n  }\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\n\n  return bet.position === roundResultPosition ? Result.WIN : Result.LOSE\n}\n\n/**\n * Given a bet object, check if it is eligible to be claimed or refunded\n */\nexport const getCanClaim = (bet: Bet) => {\n  return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true)\n}\n\n/**\n * Returns only bets where the user has won.\n * This is necessary because the API currently cannot distinguish between an uncliamed bet that has won or lost\n */\nexport const getUnclaimedWinningBets = (bets: Bet[]): Bet[] => {\n  return bets.filter(getCanClaim)\n}\n\n/**\n * Gets static data from the contract\n */\nexport const getStaticPredictionsData = async () => {\n  const { methods } = getPredictionsWithTokenContract()\n  const [currentEpoch, intervalBlocks, minBetAmount, isPaused, bufferBlocks] = await makeBatchRequest([\n    methods.currentEpoch().call,\n    methods.intervalBlocks().call,\n    methods.minBetAmount().call,\n    methods.paused().call,\n    methods.bufferBlocks().call,\n  ])\n  console.log(currentEpoch)\n  return {\n    status: isPaused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\n    currentEpoch: Number(currentEpoch),\n    intervalBlocks: Number(intervalBlocks),\n    bufferBlocks: Number(bufferBlocks),\n    minBetAmount,\n  }\n}\n\nexport const getMarketData = async (): Promise<{\n  rounds: Round[]\n  market: Market\n}> => {\n  const response = (await request(\n    GRAPH_API_PREDICTION_WITH_TOKEN,\n    gql`\n      query getMarketData {\n        rounds(first: 5, orderBy: epoch, orderDirection: desc) {\n          ${getRoundBaseFields()}\n        }\n        market(id: 1) {\n          id\n          paused\n          epoch {\n            epoch\n          }\n        }\n      }\n    `,\n  )) as { rounds: RoundResponse[]; market: MarketResponse }\n\n  return {\n    rounds: response.rounds.map(transformRoundResponse),\n    market: transformMarketResponse(response.market),\n  }\n}\n\nexport const getRound = async (id: string) => {\n  const response = await request(\n    GRAPH_API_PREDICTION_WITH_TOKEN,\n    gql`\n      query getRound($id: ID!) {\n        round(id: $id) {\n          ${getRoundBaseFields()}\n          bets {\n           ${getBetBaseFields()}\n            user {\n             ${getUserBaseFields()}\n            }\n          }\n        }\n      }\n  `,\n    { id },\n  )\n  return response.round\n}\n\ntype BetHistoryWhereClause = Record<string, string | number | boolean | string[]>\n\nexport const getBetHistory = async (\n  where: BetHistoryWhereClause = {},\n  first = 1000,\n  skip = 0,\n): Promise<BetResponse[]> => {\n  const response = await request(\n    GRAPH_API_PREDICTION_WITH_TOKEN,\n    gql`\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\n        bets(first: $first, skip: $skip, where: $where) {\n          ${getBetBaseFields()}\n          round {\n            ${getRoundBaseFields()}\n          }\n          user {\n            ${getUserBaseFields()}\n          } \n        }\n      }\n    `,\n    { first, skip, where },\n  )\n  return response.bets\n}\n\nexport const getBet = async (betId: string): Promise<BetResponse> => {\n  const response = await request(\n    GRAPH_API_PREDICTION_WITH_TOKEN,\n    gql`\n      query getBet($id: ID!) {\n        bet(id: $id) {\n          ${getBetBaseFields()}\n          round {\n            ${getRoundBaseFields()}\n          }\n          user {\n            ${getUserBaseFields()}\n          } \n        }\n      }\n  `,\n    {\n      id: betId.toLowerCase(),\n    },\n  )\n  return response.bet\n}\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictionsWithToken'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { getBubbleGumBackground } from '../../helpers'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\nconst getClaimParam = (historyFilter: HistoryFilter) => {\n  switch (historyFilter) {\n    case HistoryFilter.COLLECTED:\n      return true\n    case HistoryFilter.UNCOLLECTED:\n      return false\n    case HistoryFilter.ALL:\n    default:\n      return undefined\n  }\n}\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","export interface UserResponse {\n  id: string\n  address: string\n  block: string\n  totalBets: string\n  totalBNB: string\n  bets?: BetResponse[]\n}\n\nexport interface BetResponse {\n  id: string\n  hash: string\n  amount: string\n  position: string\n  claimed: boolean\n  user?: UserResponse\n  round?: RoundResponse\n}\n\nexport interface HistoricalBetResponse {\n  id: string\n  hash: string\n  amount: string\n  position: string\n  claimed: boolean\n  user?: UserResponse\n  round: {\n    id: string\n    epoch: string\n  }\n}\n\nexport interface RoundResponse {\n  id: string\n  epoch: string\n  failed: boolean\n  startBlock: string\n  startAt: string\n  lockAt: string\n  lockBlock: string\n  lockPrice: string\n  endBlock: string\n  closePrice: string\n  totalBets: string\n  totalAmount: string\n  bearBets: string\n  bullBets: string\n  bearAmount: string\n  bullAmount: string\n  position: string\n  bets: BetResponse[]\n}\n\nexport interface MarketResponse {\n  id: string\n  paused: boolean\n  epoch: {\n    epoch: string\n  }\n}\n\n/**\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\n */\nexport const getRoundBaseFields = () => `\n  id\n  epoch\n  failed\n  startAt\n  startBlock\n  lockAt\n  lockBlock\n  lockPrice\n  endAt\n  endBlock\n  closePrice\n  totalBets\n  totalAmount\n  bullBets\n  bullAmount\n  bearBets\n  bearAmount\n  position\n`\n\nexport const getBetBaseFields = () => `\n  id\n  hash  \n  amount\n  position\n  claimed\n`\n\nexport const getUserBaseFields = () => `\n  id\n  address\n  block\n  totalBets\n  totalBNB\n`\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport maxBy from 'lodash/maxBy'\nimport merge from 'lodash/merge'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Bet, HistoryFilter, Market, PredictionsState, PredictionStatus, Round } from 'state/types'\nimport {\n  makeFutureRoundResponse,\n  transformRoundResponse,\n  getBetHistory,\n  transformBetResponse,\n  getBet,\n  makeRoundData,\n} from './helpers'\n\nconst initialState: PredictionsState = {\n  status: PredictionStatus.INITIAL,\n  isLoading: false,\n  isHistoryPaneOpen: false,\n  isChartPaneOpen: false,\n  isFetchingHistory: false,\n  historyFilter: HistoryFilter.ALL,\n  currentEpoch: 0,\n  currentRoundStartBlockNumber: 0,\n  intervalBlocks: 100,\n  bufferBlocks: 2,\n  minBetAmount: '1000000000000000',\n  lastOraclePrice: BIG_ZERO.toJSON(),\n  rounds: {},\n  history: {},\n  bets: {},\n}\n\n// Thunks\nexport const fetchBet = createAsyncThunk<{ account: string; bet: Bet }, { account: string; id: string }>(\n  'predictions/fetchBet',\n  async ({ account, id }) => {\n    const response = await getBet(id)\n    const bet = transformBetResponse(response)\n    return { account, bet }\n  },\n)\n\nexport const fetchRoundBet = createAsyncThunk<\n  { account: string; roundId: string; bet: Bet },\n  { account: string; roundId: string }\n>('predictions/fetchRoundBet', async ({ account, roundId }) => {\n  const betResponses = await getBetHistory({\n    user: account.toLowerCase(),\n    round: roundId,\n  })\n\n  // This should always return 0 or 1 bet because a user can only place\n  // one bet per round\n  if (betResponses && betResponses.length === 1) {\n    const [betResponse] = betResponses\n    return { account, roundId, bet: transformBetResponse(betResponse) }\n  }\n\n  return { account, roundId, bet: null }\n})\n\n/**\n * Used to poll the user bets of the current round cards\n */\nexport const fetchCurrentBets = createAsyncThunk<\n  { account: string; bets: Bet[] },\n  { account: string; roundIds: string[] }\n>('predictions/fetchCurrentBets', async ({ account, roundIds }) => {\n  const betResponses = await getBetHistory({\n    user: account.toLowerCase(),\n    round_in: roundIds,\n  })\n\n  return { account, bets: betResponses.map(transformBetResponse) }\n})\n\nexport const fetchHistory = createAsyncThunk<{ account: string; bets: Bet[] }, { account: string; claimed?: boolean }>(\n  'predictions/fetchHistory',\n  async ({ account, claimed }) => {\n    const response = await getBetHistory({\n      user: account.toLowerCase(),\n      claimed,\n    })\n    const bets = response.map(transformBetResponse)\n\n    return { account, bets }\n  },\n)\n\nexport const predictionsSlice = createSlice({\n  name: 'predictions',\n  initialState,\n  reducers: {\n    setPredictionStatus: (state, action: PayloadAction<PredictionStatus>) => {\n      state.status = action.payload\n    },\n    setHistoryPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isHistoryPaneOpen = action.payload\n      state.historyFilter = HistoryFilter.ALL\n    },\n    setChartPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isChartPaneOpen = action.payload\n    },\n    setHistoryFilter: (state, action: PayloadAction<HistoryFilter>) => {\n      state.historyFilter = action.payload\n    },\n    initialize: (state, action: PayloadAction<PredictionsState>) => {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    },\n    updateMarketData: (state, action: PayloadAction<{ rounds: Round[]; market: Market }>) => {\n      const { rounds, market } = action.payload\n      const newRoundData = makeRoundData(rounds)\n      const incomingCurrentRound = maxBy(rounds, 'epoch')\n\n      if (state.currentEpoch !== incomingCurrentRound.epoch) {\n        // Add new round\n        const newestRound = maxBy(rounds, 'epoch') as Round\n        const futureRound = transformRoundResponse(\n          makeFutureRoundResponse(newestRound.epoch + 2, newestRound.startBlock + state.intervalBlocks),\n        )\n\n        newRoundData[futureRound.id] = futureRound\n      }\n\n      state.currentEpoch = incomingCurrentRound.epoch\n      console.log(state.currentEpoch)\n      state.currentRoundStartBlockNumber = incomingCurrentRound.startBlock\n      state.status = market.paused ? PredictionStatus.PAUSED : PredictionStatus.LIVE\n      state.rounds = { ...state.rounds, ...newRoundData }\n    },\n    setCurrentEpoch: (state, action: PayloadAction<number>) => {\n      state.currentEpoch = action.payload\n    },\n    markBetAsCollected: (state, action: PayloadAction<{ account: string; roundId: string }>) => {\n      const { account, roundId } = action.payload\n      const accountBets = state.bets[account]\n\n      if (accountBets && accountBets[roundId]) {\n        accountBets[roundId].claimed = true\n      }\n    },\n    markPositionAsEntered: (state, action: PayloadAction<{ account: string; roundId: string; bet: Bet }>) => {\n      const { account, roundId, bet } = action.payload\n\n      state.bets = {\n        ...state.bets,\n        [account]: {\n          ...state.bets[account],\n          [roundId]: bet,\n        },\n      }\n    },\n    setLastOraclePrice: (state, action: PayloadAction<string>) => {\n      state.lastOraclePrice = action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    // Get unclaimed bets\n    builder.addCase(fetchCurrentBets.fulfilled, (state, action) => {\n      const { account, bets } = action.payload\n      const betData = bets.reduce((accum, bet) => {\n        return {\n          ...accum,\n          [bet.round.id]: bet,\n        }\n      }, {})\n\n      state.bets = merge({}, state.bets, {\n        [account]: betData,\n      })\n    })\n\n    // Get round bet\n    builder.addCase(fetchRoundBet.fulfilled, (state, action) => {\n      const { account, roundId, bet } = action.payload\n\n      if (bet) {\n        state.bets = {\n          ...state.bets,\n          [account]: {\n            ...state.bets[account],\n            [roundId]: bet,\n          },\n        }\n      }\n    })\n\n    // Update Bet\n    builder.addCase(fetchBet.fulfilled, (state, action) => {\n      const { account, bet } = action.payload\n      state.history[account] = [...state.history[account].filter((currentBet) => currentBet.id !== bet.id), bet]\n    })\n\n    // Show History\n    builder.addCase(fetchHistory.pending, (state) => {\n      state.isFetchingHistory = true\n    })\n    builder.addCase(fetchHistory.rejected, (state) => {\n      state.isFetchingHistory = false\n      state.isHistoryPaneOpen = true\n    })\n    builder.addCase(fetchHistory.fulfilled, (state, action) => {\n      const { account, bets } = action.payload\n\n      state.isFetchingHistory = false\n      state.isHistoryPaneOpen = true\n      state.history[account] = bets\n\n      // Save any fetched bets in the \"bets\" namespace\n      const betData = bets.reduce((accum, bet) => {\n        return {\n          ...accum,\n          [bet.round.id]: bet,\n        }\n      }, {})\n\n      state.bets = merge({}, state.bets, {\n        [account]: betData,\n      })\n    })\n  },\n})\n\n// Actions\nexport const {\n  initialize,\n  setChartPaneState,\n  setCurrentEpoch,\n  setHistoryFilter,\n  setHistoryPaneState,\n  updateMarketData,\n  markBetAsCollected,\n  setPredictionStatus,\n  markPositionAsEntered,\n  setLastOraclePrice,\n} = predictionsSlice.actions\n\nexport default predictionsSlice.reducer\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useChainlinkOracleContract } from 'hooks/useContract'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(BIG_ZERO)\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n  const chainlinkOracleContract = useChainlinkOracleContract()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const response = await chainlinkOracleContract.methods.latestAnswer().call()\n      setPrice(getBalanceAmount(new BigNumber(response), 8))\n    }\n\n    fetchPrice()\n  }, [chainlinkOracleContract, lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictionsWithToken'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 30) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useWeb3React } from '@web3-react/core'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { updateMarketData } from 'state/predictionsWithToken'\nimport { getMarketData } from 'state/predictionsWithToken/helpers'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollRoundData = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const timer = setInterval(async () => {\n      const marketData = await getMarketData()\n\n      dispatch(updateMarketData(marketData))\n    }, POLL_TIME_IN_SECONDS * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [account, dispatch])\n}\n\nexport default usePollRoundData\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictionsWithToken/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictionsWithToken'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictionsWithToken'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictionsWithToken'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import BigNumber from 'bignumber.js'\nimport { Bet, BetPosition } from 'state/types'\nimport { DefaultTheme } from 'styled-components'\nimport { formatNumber, getBalanceAmount, getTokenBalanceAmount } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const getBnbAmount = (bnbBn: BigNumber) => {\n  return getBalanceAmount(bnbBn, 18)\n}\nexport const getTokenAmount = (tokenAmt: BigNumber) => {\n  return getTokenBalanceAmount(tokenAmt, 9)\n}\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier\n}\n\n// TODO: Move this to the UI Kit\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  LinkExternal,\n  ModalCloseButton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\nimport { useAppDispatch } from 'state'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport { markBetAsCollected } from 'state/predictionsWithToken'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { formatBnb } from '../helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  payout: number\n  roundId: string\n  epoch: number\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\n  payout,\n  roundId,\n  epoch,\n  onDismiss,\n  onSuccess,\n}) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = usePriceBnbBusd()\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async (result) => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n\n        dispatch(markBetAsCollected({ account, roundId }))\n        onDismiss()\n        setIsPendingTx(false)\n        toastSuccess(\n          t('Winnings collected!'),\n          <Box>\n            <Text as=\"p\" mb=\"8px\">\n              {t('Your prizes have been sent to your wallet')}\n            </Text>\n            {result.transactionHash && (\n              <LinkExternal href={getBscScanTransactionUrl(result.transactionHash)}>\n                {t('View on BscScan')}\n              </LinkExternal>\n            )}\n          </Box>,\n        )\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\n          <Text>{t('Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  payout: number\n  roundId: string\n  epoch: number\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\n  payout,\n  roundId,\n  epoch,\n  hasClaimed,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  const [onPresentCollectWinningsModal] = useModal(\n    <CollectRoundWinningsModal payout={payout} roundId={roundId} epoch={epoch} onSuccess={onSuccess} />,\n    false,\n  )\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const predictionsContract = usePredictionsContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async () => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n        setIsPendingTx(false)\n        toastSuccess(t('Position reclaimed!'))\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { formatToken, formatUsd } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, Round } from 'state/types'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: Round['totalAmount']\n}\n\nconst getTokenPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatToken(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getTokenPrizePoolAmount(totalAmount)} ICEBRK`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatToken(amount)} ICEBRK`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\n// LockPriceRow\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.cardBorder\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const predictionsContract = usePredictionsContract()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\n\n      if (canClaim) {\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, predictionsContract, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBetCanClaim, usePriceBnbBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchBet } from 'state/predictionsWithToken'\nimport { Result } from 'state/predictionsWithToken/helpers'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = result === Result.WIN ? getPayout(bet) : bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    await dispatch(fetchBet({ account, id: bet.id }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton\n            payout={payout}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            hasClaimed={!canClaim}\n            width=\"100%\"\n            mb=\"16px\"\n            onSuccess={handleSuccess}\n          >\n            {t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{t('Your Result')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${result === Result.LOSE ? '-' : '+'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanBlockNumberUrl } from 'utils/bscscan'\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\nimport { Result } from 'state/predictionsWithToken/helpers'\nimport { getMultiplier } from '../../helpers'\nimport { PayoutRow, RoundResult } from '../RoundResult'\nimport BetResult from './BetResult'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResult round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResult>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text>{t('Opening Block')}</Text>\n        <Link href={getBscScanBlockNumberUrl(bet.round.lockBlock)} external>\n          {bet.round.lockBlock}\n        </Link>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{t('Closing Block')}</Text>\n        <Link href={getBscScanBlockNumberUrl(bet.round.endBlock)} external>\n          {bet.round.endBlock}\n        </Link>\n      </Flex>\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { useBetCanClaim, useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\nimport { getRoundResult, Result } from 'state/predictionsWithToken/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            payout={payout}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Bet } from 'state/types'\nimport HistoricalBet from './HistoricalBet'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n\n  return hasBetHistory ? (\n    <>\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.id} bet={bet} />\n      ))}\n    </>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { formatBnb } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: BigNumber\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useGetCurrentEpoch, usePriceBnbBusd } from 'state/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getPayout } from 'views/Predictions/helpers'\nimport { getRoundResult, Result } from 'state/predictionsWithToken/helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst TREASURY_FEE = 0.03\n\nconst getNetPayout = (bet: Bet) => {\n  const rawPayout = getPayout(bet)\n  const fee = rawPayout * TREASURY_FEE\n  return rawPayout - fee - bet.amount\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.id, payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`${getBscScanAddressUrl(account)}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchHistory } from 'state/predictionsWithToken'\nimport { getUnclaimedWinningBets } from 'state/predictionsWithToken/helpers'\nimport { HistoryFilter } from 'state/types'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetHistoryByAccount,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const { t } = useTranslation()\n  const bets = useGetHistoryByAccount(account)\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  // Currently the api cannot filter by unclaimed AND won so we do it here\n  // when the user has selected Uncollected only include positions they won\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\n\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <UnlockButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: number\n}\n\nconst StyledEnteredTag = styled(Tag).attrs({\n  variant: 'secondary',\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\n})`\n  font-weight: bold;\n  text-transform: uppercase;\n`\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: number\n  multiplier?: number\n  hasEntered?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean) => {\n    if (isDisabled) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import styled from 'styled-components'\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\n\nconst Card = styled(UIKitCard)`\n  border-radius: 16px;\n`\n\nexport default Card\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  blockNumber: number\n  icon?: ReactElement\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  border-radius: 16px 16px 0 0;\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { useBetCanClaim } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  roundId: string\n  epoch: number\n  payout: number\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\n  roundId,\n  epoch,\n  payout,\n  isBottom = false,\n  ...props\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const canClaim = useBetCanClaim(account, roundId)\n\n  if (!canClaim) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton payout={payout} roundId={roundId} epoch={epoch} hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: Round\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch, startBlock } = round\n  const estimatedEndBlock = startBlock + interval\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetBetByRoundId } from 'state/hooks'\nimport { RoundResult } from '../RoundResult'\nimport { getPayout } from '../../helpers'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface ExpiredRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { id, epoch, endBlock, lockPrice, closePrice } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const bet = useGetBetByRoundId(account, round.id)\n  const payout = getPayout(bet)\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          blockNumber={endBlock}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n          />\n          <RoundResult round={round} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      <CollectWinningsOverlay roundId={id} epoch={epoch} payout={payout} isBottom={hasEnteredDown} />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: Round\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const estimatedEndBlock = round.startBlock + interval\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useCountUp } from 'react-countup'\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useBlock, useGetIntervalBlocks, useGetLastOraclePrice } from 'state/hooks'\nimport BlockProgress from 'components/BlockProgress'\nimport { formatUsd, getBubbleGumBackground } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst GradientBorder = styled.div`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 16px;\n  padding: 1px;\n`\n\nconst GradientCard = styled(Card)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n`\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, lockBlock, totalAmount } = round\n  const { currentBlock } = useBlock()\n  const totalInterval = useGetIntervalBlocks()\n  const price = useGetLastOraclePrice()\n  const isBull = price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n  const estimatedEndBlock = lockBlock + totalInterval\n  const priceDifference = price.minus(lockPrice).toNumber()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (currentBlock > estimatedEndBlock) {\n    return <CalculatingCard round={round} />\n  }\n\n  return (\n    <GradientBorder>\n      <GradientCard>\n        <CardHeader\n          status=\"live\"\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n          title={t('Live')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlock} />\n        <CardBody p=\"16px\">\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            hasEntered={hasEnteredUp}\n            isActive={isBull}\n          />\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n              {t('Last Price')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n              <div ref={targetRef}>\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n                </TooltipText>\n              </div>\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n                {formatUsd(priceDifference)}\n              </PositionTag>\n            </Flex>\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n            <PrizePoolRow totalAmount={totalAmount} />\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            isActive={!isBull}\n          />\n        </CardBody>\n      </GradientCard>\n      {tooltipVisible && tooltip}\n    </GradientBorder>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  IcebrkIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsWithTokenContract } from 'hooks/useContract'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { BetPosition } from 'state/types'\nimport { getDecimalAmount } from 'utils/formatBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\nimport PositionTag from '../PositionTag'\nimport { getTokenAmount } from '../../helpers'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\nimport Card from './Card'\nimport tokens from '../../../../config/constants/tokens'\n\nconst icebrk = tokens.cake.address[56]\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  onBack: () => void\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\n}\n\n// /!\\ TEMPORARY /!\\\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\n// TODO: Remove on beta-v2 smart contract release.\nconst gasPrice = new BigNumber(6).times(BIG_TEN.pow(BIG_NINE)).toString()\n\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getPercentDisplay = (percentage: number) => {\n  if (Number.isNaN(percentage)) {\n    return ''\n  }\n\n  if (percentage > 100) {\n    return ''\n  }\n\n  if (percentage < 0) {\n    return ''\n  }\n\n  return `${percentage.toLocaleString(undefined, { maximumFractionDigits: 1 })}%`\n}\n\nconst getButtonProps = (value: BigNumber, tokenBalance: BigNumber, minBetAmountBalance: number) => {\n  if (tokenBalance.eq(0)) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0) || value.isNaN()) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const tokenBalance = useTokenBalance(icebrk)\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const predictionsContract = usePredictionsWithTokenContract()\n\n  const balanceDisplay = getTokenAmount(tokenBalance).toNumber()\n  const maxBalance = getTokenAmount(tokenBalance.gt(dust) ? tokenBalance.minus(dust) : tokenBalance).toNumber()\n  const valueAsBn = new BigNumber(value)\n\n  const percentageOfMaxBalance = valueAsBn.div(maxBalance).times(100).toNumber()\n  const percentageDisplay = getPercentDisplay(percentageOfMaxBalance)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n  const minBetAmountBalance = getTokenAmount(minBetAmount).toNumber()\n\n  const handleChange = (input) => {\n    setValue(input)\n  }\n\n  const handleSliderChange = (newValue: number) => {\n    setValue(newValue.toString())\n  }\n\n  const setMax = () => {\n    setValue(maxBalance.toString())\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, tokenBalance, minBetAmountBalance)\n\n  const handleEnterPosition = () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n    const decimalValue = getDecimalAmount(valueAsBn)\n\n    predictionsContract.methods[betMethod]()\n      .send({ from: account, value: decimalValue, gasPrice })\n      .once('sending', () => {\n        setIsTxPending(true)\n      })\n      .once('receipt', async (result) => {\n        setIsTxPending(false)\n        onSuccess(decimalValue, result.transactionHash as string)\n      })\n      .once('error', (error) => {\n        const errorMsg = t('An error occurred, unable to enter your position')\n\n        toastError(t('Error'), error?.message)\n        setIsTxPending(false)\n        console.error(errorMsg, error)\n      })\n  }\n\n  // Warnings\n  useEffect(() => {\n    const bnValue = new BigNumber(value)\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient ICEBRK balance' })\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: minBetAmountBalance, token: 'ICEBRK' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <IcebrkIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              ICEBRK\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={maxBalance}\n          value={valueAsBn.lte(maxBalance) ? valueAsBn.toNumber() : 0}\n          onValueChanged={handleSliderChange}\n          step={0.000000000000001}\n          valueLabel={account ? percentageDisplay : ''}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percent) => {\n            const handleClick = () => {\n              setValue(((percent / 100) * maxBalance).toString())\n            }\n\n            return (\n              <Button\n                key={percent}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percent}%`}\n              </Button>\n            )\n          })}\n          <Button scale=\"xs\" variant=\"tertiary\" onClick={setMax} disabled={!account || isTxPending}>\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, Round } from 'state/types'\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\nimport { markPositionAsEntered } from 'state/predictionsWithToken'\nimport useToast from 'hooks/useToast'\nimport CardFlip from '../CardFlip'\nimport { formatBnb, getBnbAmount } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const interval = useGetIntervalBlocks()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { currentBlock } = useBlock()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = currentBlock >= round.startBlock + interval\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n  const estimatedLockBlock = round.startBlock + interval\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getCanEnterPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\n    // Optimistically set the user bet so we see the entered position immediately.\n    dispatch(\n      markPositionAsEntered({\n        account,\n        roundId: round.id,\n        bet: {\n          hash,\n          round,\n          position,\n          amount: getBnbAmount(decimalValue).toNumber(),\n          claimed: false,\n        },\n      }),\n    )\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      t('%position% position entered', {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          blockNumber={estimatedLockBlock}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useRoundCountdown = (intervalsToAdd = 1) => {\n  const interval = useGetIntervalBlocks()\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\n  const blocksToAdd = intervalsToAdd * interval\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\n\n  return seconds\n}\n\nexport default useRoundCountdown\n","import React from 'react'\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\nimport { formatRoundTime } from '../../helpers'\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: Round\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const currentEpoch = useGetCurrentEpoch()\n  const estimatedEndBlock = round.startBlock + interval\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\n  const countdown = formatRoundTime(seconds)\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"soon\"\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Later')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByRoundId, useGetCurrentEpoch } from 'state/hooks'\nimport { BetPosition, Round } from 'state/types'\nimport { getMultiplier } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: Round\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { id, epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const bet = useGetBetByRoundId(account, id)\n  const hasEntered = bet !== null\n  const hasEnteredUp = hasEntered && bet.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && bet.position === BetPosition.BEAR\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={bet?.amount}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={bet?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      betAmount={bet?.amount}\n      bullMultiplier={bullMultiplier}\n      bearMultiplier={bearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\nimport { useGetLastOraclePrice } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useRoundCountdown from '../hooks/useRoundCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 60px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  display: flex;\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: 16px;\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval }) => {\n  const seconds = useRoundCountdown()\n  const countdown = formatRoundTime(seconds)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {seconds === 0 ? t('Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{interval}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Card)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictionsWithToken'\nimport { useGetIsFetchingHistory } from 'state/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"60m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <IconButton\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </IconButton>\n          </HelpButtonWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport { fetchCurrentBets } from 'state/predictionsWithToken'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: rounds.map((round) => round.id) }))\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap/uikit'\nimport { useGetSortedRounds } from 'state/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC = () => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const initialIndex = Math.floor(rounds.length / 2)\n\n  useOnNextRound()\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={initialIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.id}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\n\nenum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState } from 'state/predictionsWithToken'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && (\n              <div>\n                <Positions />\n              </div>\n            )}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictionsWithToken'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ChartDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Text as=\"p\" mb=\"16px\">\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\n        </Text>\n        <Text as=\"p\" mb=\"16px\">\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\n        </Text>\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n          {t('I understand')}\n        </Button>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n            external\n          >\n            {t('Learn More')}\n          </LinkExternal>\n        </Flex>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\nimport {\n  getMarketData,\n  getStaticPredictionsData,\n  makeFutureRoundResponse,\n  makeRoundData,\n  transformRoundResponse,\n} from 'state/predictionsWithToken/helpers'\nimport { fetchCurrentBets, initialize, setPredictionStatus } from 'state/predictionsWithToken'\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollRoundData from './hooks/usePollRoundData'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer from './components/ChartDisclaimer'\n\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\n\nconst Predictions = () => {\n  const { isXl } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, 'pancake_predictions_accepted_risk')\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, 'pancake_predictions_chart')\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const isDesktop = isXl\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const handleAcceptChart = () => setHasAcceptedChart(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: marketData.rounds.map((round) => round.id) }))\n\n      if (marketData.market.paused) {\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\n        const currentRoundStartBlock = Number(latestRound.startBlock)\n        const futureRounds = []\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\n\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\n        }\n\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\n\n        dispatch(\n          initialize({\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\n            historyFilter: HistoryFilter.ALL,\n            currentRoundStartBlockNumber: currentRoundStartBlock,\n            rounds: roundData,\n            history: {},\n            bets: {},\n          }),\n        )\n      } else {\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\n      }\n    }\n\n    // Do not start initialization until the first block has been retrieved\n    if (initialBlock > 0) {\n      fetchInitialData()\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollRoundData()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n","import BigNumber from 'bignumber.js'\nimport { Bet, BetPosition } from 'state/types'\nimport { DefaultTheme } from 'styled-components'\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const getBnbAmount = (bnbBn: BigNumber) => {\n  return getBalanceAmount(bnbBn, 18)\n}\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const formatToken = (token: number) => {\n  return token ? token.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 }) : '0'\n}\n\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier\n}\n\n// TODO: Move this to the UI Kit\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply * 1e9))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call() * 1e9\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\nimport { useBlock } from 'state/hooks'\n\ninterface BlockProgressProps extends ProgressProps {\n  startBlock: number\n  endBlock: number\n}\n\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\n  const { currentBlock } = useBlock()\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default BlockProgress\n","import { useEffect, useRef, useState } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useBlockCountdown = (blockNumber: number) => {\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\n\n  useEffect(() => {\n    const startCountdown = async () => {\n      const web3 = getWeb3NoAccount()\n      const currentBlock = await web3.eth.getBlockNumber()\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current)\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining((prevSecondsRemaining) => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current)\n            }\n\n            return prevSecondsRemaining - 1\n          })\n        }, 1000)\n      }\n    }\n\n    startCountdown()\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [setSecondsRemaining, blockNumber, timer])\n\n  return secondsRemaining\n}\n\nexport default useBlockCountdown\n"],"sourceRoot":""}